#!/usr/bin/env python3

import os
import sys
import re
import math
import hashlib
from datetime import datetime, timezone
import dateutil
import subprocess

VERSION = "0.0.6"
fileinfo = {}
dirinfo = {}
NOW = datetime.now(timezone.utc)

ICONS = {
    'file': '/img/document.gif',
    'folder': '/img/folder.gif',
    'up': '/img/up.gif',
    'xml': '/img/xml.gif',
    'json': '/img/json.gif',
    'txt': '/img/text.gif',
    'text': '/img/text.gif'
    }

def escape(text):
    return text.replace("&", "&amp;").replace("<", "&lt;")

def sort_listings(value):
    # This is more than a bit of a hack.
    pos = value.rfind("/")
    if pos > 0:
        name = value[pos+1:]
    else:
        name = value
    if "." in name:
        parts = []
        for part in name.split("."):
            try:
                number = int(part)
                parts.append("{:05d}".format(number))
            except ValueError:
                parts.append(part)
        name = ".".join(parts)
    return name

def readgit():
    log = subprocess.run(
        ["git", "log", "--name-status", "--date-order", "--date=iso-strict", "--no-merges"],
        capture_output=True,
        universal_newlines=True,
        check=True)

    re_rename = re.compile("^(R[^\t]*)\t([^\t]+)\t(.+)$")
    re_file = re.compile("^([ACDMRTUXB][^\t]*)\t(.+)$")

    record = {}
    for line in log.stdout.split("\n"):
        if line.startswith("commit "):
            commit = line[7:]
            pos = commit.find(" (")
            if pos >= 0:
                commit = commit[0:pos]
            record = {'commit': commit}
        elif line.startswith("Author: "):
            record['author'] = line[8:]
        elif line.startswith("Date:"):
            record['date'] = line[8:]
        elif line == "":
            pass
        elif line.startswith(" "):
            if "message" not in record:
                record["message"] = line.strip()
        else:
            rename = re_rename.match(line)
            name = re_file.match(line)
            path = None
            skip = False
            if rename:
                path = rename.group(3)
            elif name:
                path = name.group(2)
                skip = name.group(1) == "D"
            if path:
                if not skip and path not in fileinfo:
                    fileinfo[path] = record

                    segments = path.split("/")
                    paths = ["/"]
                    path = ""
                    for pos in range(0, len(segments) - 1):
                        if path == "":
                            path = segments[pos]
                        else:
                            path += "/" + segments[pos]
                        paths.append(path)

                    for path in paths:
                        if path not in dirinfo or dirinfo[path]["date"] < record["date"]:
                            dirinfo[path] = record
            else:
                raise RuntimeError("Unexpected: " + line)

def index(root):
    re_meta_gen = re.compile(".*<meta[^>]+name=.generator.[^>]+content=.(bin/[^\'\"]+)")
    re_meta_dig = re.compile(".*<meta[^>]+name=.digest.[^>]+content=.([a-fA-F0-9]+)'")

    dirs = []
    files = []
    for entry in os.listdir(root):
        if entry in [".", "..", ".git", "index.html"]:
            pass
        else:
            if root == ".":
                key = entry
            else:
                key = f"{root}/{entry}"

            if os.path.isfile(f"{root}/{entry}"):
                files.append(key)
            else:
                dirs.append(key)
                index(key)

    writehash = None
    write = True
    index_html = f"{root}/index.html"
    if os.path.exists(index_html):
        write = False
        if os.path.isfile(index_html):
            with open(index_html, "r") as idx:
                for line in idx:
                    if re_meta_gen.match(line):
                        write = True
                    else:
                        parts = re_meta_dig.match(line)
                        if parts:
                            writehash = parts.group(1)

    if not write:
        print(f"{index_html}, not autogenerated.")
        return

    hashsrc = VERSION
    for entry in sorted(dirs + files, key=str.casefold):
        if entry in dirs and entry in dirinfo:
            record = dirinfo[entry]
        elif entry in fileinfo:
            record = fileinfo[entry]
        else:
            record = {}
        if "commit" in record:
            hashsrc += record["commit"]

    digest = hashlib.sha256()
    digest.update(hashsrc.encode('utf-8'))
    hexdigest = digest.hexdigest()

    if hexdigest == writehash:
        print(f"{index_html}, unchanged.")
        return

    print(f"{index_html}, updated.")
        
    with open(index_html, 'w', encoding='utf-8') as html:
        print("<!DOCTYPE html>", file=html)
        print("<html xmlns='http://www.w3.org/1999/xhtml'>", file=html)
        print("<head>", file=html)
        print(f"<title>Index of /{root}</title>", file=html)
        print("<meta charset='utf-8' />", file=html)
        print("<link rel='stylesheet' href='/css/dirs.css' />", file=html)
        print(f"<meta name='generator' content='bin/git-index-html {VERSION}' />", file=html)
        print(f"<meta name='digest' content='{digest.hexdigest()}' />", file=html)
        print("</head>", file=html)
        print("<body>", file=html)
        print("<header>", file=html)
        print(f"<h1>Index of /{root}</h1>", file=html)
        print("</header>", file=html)
        print("<main>", file=html)
        if root != '.':
            print(f"<p><a href='../'><img class='icon' alt='[Up icon]' src='{ICONS['up']}' />Up to higher level</a></p>", file=html)

        print("<table>", file=html)
        print("<thead>", file=html)
        print("<tr>", file=html);
        print("<th>Name</th>", file=html)
        print("<th>Size</th>", file=html)
        print("<th>Modified</th>", file=html)
        print("<th>Author</th>", file=html)
        print("<th>Commit</th>", file=html)
        print("<th>Message</th>", file=html)
        print("</tr>", file=html);

        print("</thead>", file=html)
        print("<tbody>", file=html)

        for entry in sorted(dirs + files, key=sort_listings):
            if entry in dirs and entry in dirinfo:
                record = dirinfo[entry]
            elif entry in fileinfo:
                record = fileinfo[entry]
            else:
                record = {}

            if entry.rfind("/") > 0:
                name = entry[entry.rfind("/")+1:]
            else:
                name = entry

            print("<tr>", file=html)

            if entry in dirs:
                icon = f"<img class='icon' alt='[Folder icon]' src='{ICONS['folder']}' />"
                print(f"<th><a href='{name}/'>{icon}{name}/</a></th>", file=html)
                print(f"<td></td>", file=html)
            else:
                if name.rfind(".") > 0:
                    ext = name[name.rfind(".")+1:]
                else:
                    ext = "file"
                if ext in ICONS:
                    icon = f"<img class='icon' alt='[{ext} icon]' src='{ICONS[ext]}' />"
                else:
                    icon = f"<img class='icon' alt='[file icon]' src='{ICONS['file']}' />"
                print(f"<th><a href='{name}'>{icon}{name}</a></th>", file=html)
                print(f"<td>{'{:,}'.format(os.path.getsize(entry))}</td>", file=html)

            if "commit" in record:
                tstamp = dateutil.parser.isoparse(record['date'])
                print(f"<td><span title='{record['date']}'>{tstamp.strftime('%d %b %Y at %H:%M')}</span></td>", file=html)

                author = record['author']
                try:
                    pos = author.index("<")
                    author = author[0:pos]
                except ValueError:
                    pass

                print(f"<td><span title='{escape(record['author'])}'>{author}</span></td>", file=html)
                print(f"<td><span>{record['commit'][0:8]}</span></td>", file=html)

                if "message" in record:
                    message = record["message"]
                else:
                    message = ""

                print(f"<td><span title='{escape(message)}'>", end='', file=html)
                if len(message) > 64:
                    print(f"{escape(message[0:63])}â€¦</span></td>", file=html)
                else:
                    print(f"{escape(message)}</span></td>", file=html)

            else:
                print("<td class='unknown'>-</td>", file=html)
                print("<td class='unknown'>-</td>", file=html)
                print("<td class='unknown'>-</td>", file=html)
                print("<td class='unknown'>-</td>", file=html)
            print("</tr>", file=html)

        print("</tbody>", file=html)
        print("</table>", file=html)
        print("</main>", file=html)

        print("<footer>", file=html)
        print(f"<p>Indexed on {NOW} by git-index-html version {VERSION}.</p>", file=html)
        print("</footer>", file=html)
        
        print("</body>", file=html)
        print("</html>", file=html)

readgit()
index(".")
