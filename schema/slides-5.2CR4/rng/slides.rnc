namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ctrl = "http://nwalsh.com/xmlns/schema-control/"
default namespace db = "http://docbook.org/ns/docbook"
namespace html = "http://www.w3.org/1999/xhtml"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace s = "http://purl.oclc.org/dsdl/schematron"
namespace trans = "http://docbook.org/ns/transclusion"
namespace xlink = "http://www.w3.org/1999/xlink"

# This file is part of DocBook Slides V5.2CR4-1
# 
# Copyright 1992-2015 HaL Computer Systems, Inc.,
# O'Reilly & Associates, Inc., ArborText, Inc., Fujitsu Software
# Corporation, Norman Walsh, Sun Microsystems, Inc., and the
# Organization for the Advancement of Structured Information
# Standards (OASIS).
# 
# Permission to use, copy, modify and distribute the DocBook schema
# and its accompanying documentation for any purpose and without fee
# is hereby granted in perpetuity, provided that the above copyright
# notice and this paragraph appear in all copies. The copyright
# holders make no representation about the suitability of the schema
# for any purpose. It is provided "as is" without expressed or implied
# warranty.
# 
# If you modify the DocBook schema in any way, label your schema as a
# variant of DocBook. See the reference documentation
# (http://docbook.org/tdg5/en/html/ch05.html#s-notdocbook)
# for more information.
# 
# Please direct all questions, bug reports, or suggestions for changes
# to the docbook-comment@lists.oasis-open.org mailing list. For more
# information, see http://www.oasis-open.org/docbook/.
# 
# ======================================================================

s:ns [
  prefix = "a"
  uri = "http://relaxng.org/ns/compatibility/annotations/1.0"
]
s:ns [ prefix = "ctrl" uri = "http://nwalsh.com/xmlns/schema-control/" ]
s:ns [ prefix = "db" uri = "http://docbook.org/ns/docbook" ]
s:ns [ prefix = "html" uri = "http://www.w3.org/1999/xhtml" ]
s:ns [ prefix = "rng" uri = "http://relaxng.org/ns/structure/1.0" ]
s:ns [ prefix = "s" uri = "http://purl.oclc.org/dsdl/schematron" ]
s:ns [ prefix = "trans" uri = "http://docbook.org/ns/transclusion" ]
s:ns [ prefix = "xlink" uri = "http://www.w3.org/1999/xlink" ]
db.status.attribute =
  
  ## Identifies the editorial or publication status of the element on which it occurs
  attribute status { text }
db.recursive.blocks.or.sections =
  (db.all.blocks+, db.recursive.sections?) | db.recursive.sections
db.navigation.components = notAllowed | db.bibliography
div {
  db.section.status.attribute = db.status.attribute
  db.section.class.enumeration =
    
    ## A section of legal obligations or requirements
    "legal"
  db.section.class-enum.attribute =
    
    ## Identifies the nature of the section
    attribute class { db.section.class.enumeration }
  db.section.class-other.attribute =
    
    ## Identifies a non-standard section class
    attribute otherclass { xsd:NMTOKEN }
  db.section.class-other.attributes =
    
    ## Indicates that a non-standard section class is applied
    attribute class {
      
      ## Indicates that the identifier is some 'other' kind.
      "other"
    }
    & db.section.class-other.attribute
  db.section.class.attribute =
    db.section.class-enum.attribute | db.section.class-other.attributes
  db.section.role.attribute = attribute role { text }
  db.section.attlist =
    db.section.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.section.status.attribute?
    & db.section.class.attribute?
  db.section.info = db._info.title.req
  db.section =
    
    ## A recursive section
    element section {
      db.section.attlist,
      db.section.info,
      db.navigation.components*,
      db.recursive.blocks.or.sections?,
      db.navigation.components*
    }
}
db.recursive.sections = db.section+
db.relation.attribute =
  
  ## Identifies the relationship between the bibliographic elemnts
  attribute relation { text }
div {
  db.bibliomixed.role.attribute = attribute role { text }
  db.bibliomixed.pubwork.attribute = db.biblio.pubwork.attribute
  db.bibliomixed.attlist =
    db.bibliomixed.role.attribute?
    & db.bibliomixed.pubwork.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.bibliomixed =
    
    ## A cooked entry in a bibliography
    element bibliomixed {
      db.bibliomixed.attlist,
      ((db._text
        | db.honorific
        | db.firstname
        | db.surname
        | db.lineage
        | db.othername
        | db.bibliographic.elements)*
       | (db._text
          | db.honorific
          | db.givenname
          | db.surname
          | db.lineage
          | db.othername
          | db.bibliographic.elements)*)
    }
}
div {
  db.bibliomset.relation.attribute = db.relation.attribute
  db.bibliomset.role.attribute = attribute role { text }
  db.bibliomset.attlist =
    db.bibliomset.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.bibliomset.relation.attribute?
  db.bibliomset =
    
    ## A cooked container for related bibliographic information
    element bibliomset {
      db.bibliomset.attlist,
      ((db._text
        | db.honorific
        | db.firstname
        | db.surname
        | db.lineage
        | db.othername
        | db.bibliographic.elements)*
       | (db._text
          | db.honorific
          | db.givenname
          | db.surname
          | db.lineage
          | db.othername
          | db.bibliographic.elements)*)
    }
}
div {
  db.bibliomisc.role.attribute = attribute role { text }
  db.bibliomisc.attlist =
    db.bibliomisc.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.bibliomisc =
    
    ## Untyped bibliographic information
    element bibliomisc { db.bibliomisc.attlist, db._text }
}
div {
  db.bibliography.status.attrib = db.status.attribute
  db.bibliography.role.attribute = attribute role { text }
  db.bibliography.attlist =
    db.bibliography.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.bibliography.status.attrib?
  db.bibliography.info = db._info
}
div {
  db.bibliodiv.status.attrib = db.status.attribute
  db.bibliodiv.role.attribute = attribute role { text }
  db.bibliodiv.attlist =
    db.bibliodiv.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.bibliodiv.status.attrib?
  db.bibliodiv.info = db._info.title.req
}
div {
  db.bibliography =
    
    ## A bibliography
    element bibliography {
      db.bibliography.attlist,
      db.bibliography.info,
      db.all.blocks*,
      (db.bibliodiv+ | db.bibliomixed+)
    }
}
div {
  db.bibliodiv =
    
    ## A section of a bibliography
    element bibliodiv {
      db.bibliodiv.attlist,
      db.bibliodiv.info,
      db.all.blocks*,
      db.bibliomixed+
    }
}
db.char.attribute =
  
  ## Specifies the alignment character when align
  ##  is set to char
  ## .
  attribute char { text }
db.charoff.attribute =
  
  ## Specifies the percentage of the column's total width that should appear to the left of the first occurance of the character identified in char
  ##  when align
  ##  is set to char
  ## .
  attribute charoff {
    xsd:decimal { minExclusive = "0" maxExclusive = "100" }
  }
db.frame.attribute =
  
  ## Specifies how the table is to be framed. Note that there is no way to obtain a border on only the starting edge (left, in left-to-right writing systems) of the table.
  attribute frame {
    
    ## Frame all four sides of the table. In some environments with limited control over table border formatting, such as HTML, this may imply additional borders.
    "all"
    | 
      ## Frame only the bottom of the table.
      "bottom"
    | 
      ## Place no border on the table. In some environments with limited control over table border formatting, such as HTML, this may disable other borders as well.
      "none"
    | 
      ## Frame the left and right sides of the table.
      "sides"
    | 
      ## Frame the top of the table.
      "top"
    | 
      ## Frame the top and bottom of the table.
      "topbot"
  }
db.colsep.attribute =
  
  ## Specifies the presence or absence of the column separator
  attribute colsep {
    
    ## No column separator rule.
    "0"
    | 
      ## Provide a column separator rule on the right
      "1"
  }
db.rowsep.attribute =
  
  ## Specifies the presence or absence of the row separator
  attribute rowsep {
    
    ## No row separator rule.
    "0"
    | 
      ## Provide a row separator rule below
      "1"
  }
db.orient.attribute =
  
  ## Specifies the orientation of the table
  attribute orient {
    
    ## 90 degrees counter-clockwise from the rest of the text flow.
    "land"
    | 
      ## The same orientation as the rest of the text flow.
      "port"
  }
db.tabstyle.attribute =
  
  ## Specifies the table style
  attribute tabstyle { text }
db.rowheader.attribute =
  
  ## Indicates whether or not the entries in the first column should be considered row headers
  attribute rowheader {
    
    ## Indicates that entries in the first column of the table are functionally row headers (analogous to the way that a thead provides column headers).
    "firstcol"
    | 
      ## Indicates that row headers are identified by use of the headers attribute on entries in the table.
      "headers"
    | 
      ## Indicates that entries in the first column have no special significance with respect to column headers.
      "norowheader"
  }
db.align.attribute =
  
  ## Specifies the horizontal alignment of text in an entry.
  attribute align {
    
    ## Centered.
    "center"
    | 
      ## Aligned on a particular character.
      "char"
    | 
      ## Left and right justified.
      "justify"
    | 
      ## Left justified.
      "left"
    | 
      ## Right justified.
      "right"
  }
db.valign.attribute =
  
  ## Specifies the vertical alignment of text in an entry.
  attribute valign {
    
    ## Aligned on the bottom of the entry.
    "bottom"
    | 
      ## Aligned in the middle.
      "middle"
    | 
      ## Aligned at the top of the entry.
      "top"
  }
db.specify-col-by-colname.attributes =
  
  ## Specifies a column specification by name.
  attribute colname { text }
db.specify-col-by-namest.attributes =
  
  ## Specifies a starting column by name.
  attribute namest { text }
db.specify-span-by-spanspec.attributes =
  
  ## Specifies a span by name.
  attribute spanname { text }
db.specify-span-directly.attributes =
  
  ## Specifies a starting column by name.
  attribute namest { text }
  & 
    ## Specifies an ending column by name.
    attribute nameend { text }
db.column-spec.attributes =
  db.specify-col-by-colname.attributes
  | db.specify-col-by-namest.attributes
  | db.specify-span-by-spanspec.attributes
  | db.specify-span-directly.attributes
db.colname.attribute =
  
  ## Provides a name for a column specification.
  attribute colname { text }
db.spanname.attribute =
  
  ## Provides a name for a span specification.
  attribute spanname { text }
div {
  db.tgroup.role.attribute = attribute role { text }
  db.tgroup.tgroupstyle.attribute =
    
    ## Additional style information for downstream processing; typically the name of a style.
    attribute tgroupstyle { text }
  db.tgroup.cols.attribute =
    
    ## The number of columns in the table. Must be an integer greater than zero.
    attribute cols { xsd:positiveInteger }
  db.tgroup.attlist =
    db.tgroup.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.char.attribute?
    & db.charoff.attribute?
    & db.tgroup.tgroupstyle.attribute?
    & db.tgroup.cols.attribute
    & db.colsep.attribute?
    & db.rowsep.attribute?
    & db.align.attribute?
  db.tgroup =
    
    ## A wrapper for the main content of a table, or part of a table
    element tgroup {
      db.tgroup.attlist,
      db.colspec*,
      db.spanspec*,
      db.cals.thead?,
      db.cals.tfoot?,
      db.cals.tbody
    }
}
div {
  db.colspec.role.attribute = attribute role { text }
  db.colspec.colnum.attribute =
    
    ## The number of the column to which this specification applies. Must be greater than any preceding column number. Defaults to one more than the number of the preceding column, if there is one, or one.
    attribute colnum { xsd:positiveInteger }
  db.colspec.colwidth.attribute =
    
    ## Specifies the width of the column.
    attribute colwidth { text }
  db.colspec.attlist =
    db.colspec.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.colspec.colnum.attribute?
    & db.char.attribute?
    & db.colsep.attribute?
    & db.colspec.colwidth.attribute?
    & db.charoff.attribute?
    & db.colname.attribute?
    & db.rowsep.attribute?
    & db.align.attribute?
    & db.rowheader.attribute?
  db.colspec =
    
    ## Specifications for a column in a table
    element colspec { db.colspec.attlist, empty }
}
div {
  db.spanspec.role.attribute = attribute role { text }
  db.spanspec.namest.attribute =
    
    ## Specifies a starting column by name.
    attribute namest { text }
  db.spanspec.nameend.attribute =
    
    ## Specifies an ending column by name.
    attribute nameend { text }
  db.spanspec.attlist =
    db.spanspec.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.spanname.attribute
    & db.spanspec.namest.attribute
    & db.spanspec.nameend.attribute
    & db.char.attribute?
    & db.colsep.attribute?
    & db.charoff.attribute?
    & db.rowsep.attribute?
    & db.align.attribute?
  db.spanspec =
    
    ## Formatting information for a spanned column in a table
    element spanspec { db.spanspec.attlist, empty }
}
div {
  db.cals.thead.role.attribute = attribute role { text }
  db.cals.thead.attlist =
    db.cals.thead.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.valign.attribute?
  db.cals.thead =
    
    ## A table header consisting of one or more rows
    element thead { db.cals.thead.attlist, db.colspec*, db.row+ }
}
div {
  db.cals.tfoot.role.attribute = attribute role { text }
  db.cals.tfoot.attlist =
    db.cals.tfoot.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.valign.attribute?
  db.cals.tfoot =
    
    ## A table footer consisting of one or more rows
    element tfoot { db.cals.tfoot.attlist, db.colspec*, db.row+ }
}
div {
  db.cals.tbody.role.attribute = attribute role { text }
  db.cals.tbody.attlist =
    db.cals.tbody.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.valign.attribute?
  db.cals.tbody =
    
    ## A wrapper for the rows of a table or informal table
    element tbody { db.cals.tbody.attlist, db.row+ }
}
div {
  db.row.role.attribute = attribute role { text }
  db.row.attlist =
    db.row.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.rowsep.attribute?
    & db.valign.attribute?
  db.row =
    
    ## A row in a table
    element row { db.row.attlist, (db.entry | db.entrytbl)+ }
}
div {
  db.entry.role.attribute = attribute role { text }
  db.entry.morerows.attribute =
    
    ## Specifies the number of additional rows which this entry occupies. Defaults to zero.
    attribute morerows { xsd:integer }
  db.entry.rotate.attribute =
    
    ## Specifies the rotation of this entry. A value of 1 (true) rotates the cell 90 degrees counter-clockwise. A value of 0 (false) leaves the cell unrotated.
    attribute rotate {
      
      ## Do not rotate the cell.
      "0"
      | 
        ## Rotate the cell 90 degrees counter-clockwise.
        "1"
    }
  db.entry.scope.attribute =
    
    ## Specifies the scope of a header.
    attribute scope {
      
      ## Applies to the row
      "row"
      | 
        ## Applies to the column
        "col"
      | 
        ## Applies to the row group
        "rowgroup"
      | 
        ## Applies to the column group
        "colgroup"
    }
  db.entry.headers.attribute =
    
    ## Specifies the entry or entries which serve as headers for this element.
    attribute headers { xsd:IDREFS }
  db.entry.attlist =
    db.entry.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.valign.attribute?
    & db.char.attribute?
    & db.colsep.attribute?
    & db.charoff.attribute?
    & db.entry.morerows.attribute?
    & db.column-spec.attributes?
    & db.rowsep.attribute?
    & db.entry.rotate.attribute?
    & db.align.attribute?
    & db.entry.scope.attribute?
    & db.entry.headers.attribute?
  db.entry =
    
    ## A cell in a table
    [
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:entry"
          s:assert [
            test = "not(.//db:table)"
            "table must not occur among the children or descendants of entry"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:entry"
          s:assert [
            test = "not(.//db:informaltable)"
            "informaltable must not occur among the children or descendants of entry"
          ]
        ]
      ]
    ]
    element entry {
      db.entry.attlist, (db.all.inlines* | db.all.blocks*)
    }
}
div {
  db.entrytbl.role.attribute = attribute role { text }
  db.entrytbl.tgroupstyle.attribute =
    
    ## Additional style information for downstream processing; typically the name of a style.
    attribute tgroupstyle { text }
  db.entrytbl.cols.attribute =
    
    ## The number of columns in the entry table. Must be an integer greater than zero.
    attribute cols { xsd:positiveInteger }
  db.entrytbl.attlist =
    db.entrytbl.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.char.attribute?
    & db.charoff.attribute?
    & db.column-spec.attributes?
    & db.entrytbl.tgroupstyle.attribute?
    & db.entrytbl.cols.attribute?
    & db.colsep.attribute?
    & db.rowsep.attribute?
    & db.align.attribute?
  db.entrytbl =
    
    ## A subtable appearing in place of an entry in a table
    element entrytbl {
      db.entrytbl.attlist,
      db.colspec*,
      db.spanspec*,
      db.cals.entrytbl.thead?,
      db.cals.entrytbl.tbody
    }
}
div {
  db.cals.entrytbl.thead.role.attribute = attribute role { text }
  db.cals.entrytbl.thead.attlist =
    db.cals.entrytbl.thead.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.valign.attribute?
  db.cals.entrytbl.thead =
    
    ## A table header consisting of one or more rows
    element thead {
      db.cals.entrytbl.thead.attlist, db.colspec*, db.entrytbl.row+
    }
}
div {
  db.cals.entrytbl.tbody.role.attribute = attribute role { text }
  db.cals.entrytbl.tbody.attlist =
    db.cals.entrytbl.tbody.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.valign.attribute?
  db.cals.entrytbl.tbody =
    
    ## A wrapper for the rows of a table or informal table
    element tbody { db.cals.entrytbl.tbody.attlist, db.entrytbl.row+ }
}
div {
  db.entrytbl.row.role.attribute = attribute role { text }
  db.entrytbl.row.attlist =
    db.entrytbl.row.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.rowsep.attribute?
    & db.valign.attribute?
  db.entrytbl.row =
    
    ## A row in a table
    element row { db.entrytbl.row.attlist, db.entry+ }
}
div {
  db.cals.table.role.attribute = attribute role { text }
  db.cals.table.label.attribute = db.label.attribute
  db.cals.table.type.attribute =
    
    ## Identifies the type of table
    attribute type { text }?
  db.cals.table.attlist =
    db.cals.table.role.attribute?
    & db.cals.table.type.attribute?
    & db.cals.table.label.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.tabstyle.attribute?
    & db.floatstyle.attribute?
    & db.orient.attribute?
    & db.colsep.attribute?
    & db.rowsep.attribute?
    & db.frame.attribute?
    & db.pgwide.attribute?
    & 
      ## Indicates if the short or long title should be used in a List of Tables
      attribute shortentry {
        
        ## Indicates that the full title should be used.
        "0"
        | 
          ## Indicates that the short short title (titleabbrev) should be used.
          "1"
      }?
    & 
      ## Indicates if the table should appear in a List of Tables
      attribute tocentry {
        
        ## Indicates that the table should not occur in the List of Tables.
        "0"
        | 
          ## Indicates that the table should appear in the List of Tables.
          "1"
      }?
    & db.rowheader.attribute?
  db.cals.table.info = db._info.title.onlyreq
  db.cals.table =
    
    ## A formal table in a document
    [
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:table"
          s:assert [
            test = "not(.//db:example)"
            "example must not occur among the children or descendants of table"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:table"
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur among the children or descendants of table"
          ]
        ]
      ]
    ]
    element table {
      db.cals.table.attlist,
      db.cals.table.info,
      (db.alt? & db.textobject*),
      (db.mediaobject+ | db.tgroup+),
      db.caption?
    }
}
div {
  db.cals.informaltable.role.attribute = attribute role { text }
  db.cals.informaltable.type.attribute =
    
    ## Identifies the type of table
    attribute type { text }?
  db.cals.informaltable.attlist =
    db.cals.informaltable.role.attribute?
    & db.cals.informaltable.type.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.tabstyle.attribute?
    & db.floatstyle.attribute?
    & db.orient.attribute?
    & db.colsep.attribute?
    & db.rowsep.attribute?
    & db.frame.attribute?
    & db.pgwide.attribute?
    & db.rowheader.attribute?
  db.cals.informaltable.info = db._info.title.forbidden
  db.cals.informaltable =
    
    ## A table without a title
    element informaltable {
      db.cals.informaltable.attlist,
      db.cals.informaltable.info,
      (db.alt? & db.textobject*),
      (db.mediaobject+ | db.tgroup+),
      db.caption?
    }
}
db.html.coreattrs =
  
  ## This attribute assigns a class name or set of class names to an element. Any number of elements may be assigned the same class name or names. Multiple class names must be separated by white space characters.
  attribute class { text }?
  & 
    ## This attribute specifies style information for the current element.
    attribute style { text }?
  & 
    ## This attribute offers advisory information about the element for which it is set.
    attribute title { text }?
db.html.i18n =
  
  ## This attribute specifies the base language of an element's attribute values and text content. The default value of this attribute is unknown.
  attribute lang { text }?
db.html.events =
  
  ## Occurs when the pointing device button is clicked over an element.
  attribute onclick { text }?
  & 
    ## Occurs when the pointing device button is double clicked over an element.
    attribute ondblclick { text }?
  & 
    ## Occurs when the pointing device button is pressed over an element.
    attribute onmousedown { text }?
  & 
    ## Occurs when the pointing device button is released over an element.
    attribute onmouseup { text }?
  & 
    ## Occurs when the pointing device is moved onto an element.
    attribute onmouseover { text }?
  & 
    ## Occurs when the pointing device is moved while it is over an element.
    attribute onmousemove { text }?
  & 
    ## Occurs when the pointing device is moved away from an element.
    attribute onmouseout { text }?
  & 
    ## Occurs when a key is pressed and released over an element.
    attribute onkeypress { text }?
  & 
    ## Occurs when a key is pressed down over an element.
    attribute onkeydown { text }?
  & 
    ## Occurs when a key is released over an element.
    attribute onkeyup { text }?
db.html.attrs =
  db.common.attributes
  & db.html.coreattrs
  & db.html.i18n
  & db.html.events
db.html.cellhalign =
  
  ## Specifies the alignment of data and the justification of text in a cell.
  attribute align {
    
    ## Left-flush data/Left-justify text. This is the default value for table data.
    "left"
    | 
      ## Center data/Center-justify text. This is the default value for table headers.
      "center"
    | 
      ## Right-flush data/Right-justify text.
      "right"
    | 
      ## Double-justify text.
      "justify"
    | 
      ## Align text around a specific character. If a user agent doesn't support character alignment, behavior in the presence of this value is unspecified.
      "char"
  }?
  & 
    ## This attribute specifies a single character within a text fragment to act as an axis for alignment. The default value for this attribute is the decimal point character for the current language as set by the lang attribute (e.g., the period in English and the comma in French). User agents are not required to support this attribute.
    attribute char { text }?
  & 
    ## When present, this attribute specifies the offset to the first occurrence of the alignment character on each line. If a line doesn't include the alignment character, it should be horizontally shifted to end at the alignment position. When charoff is used to set the offset of an alignment character, the direction of offset is determined by the current text direction (set by the dir attribute). In left-to-right texts (the default), offset is from the left margin. In right-to-left texts, offset is from the right margin. User agents are not required to support this attribute.
    attribute charoff {
      xsd:integer >> a:documentation [ "An explicit offset." ]
      | xsd:string { pattern = "[0-9]+%" }
        >> a:documentation [ "A percentage offset." ]
    }?
db.html.cellvalign =
  
  ## Specifies the vertical position of data within a cell.
  attribute valign {
    
    ## Cell data is flush with the top of the cell.
    "top"
    | 
      ## Cell data is centered vertically within the cell. This is the default value.
      "middle"
    | 
      ## Cell data is flush with the bottom of the cell.
      "bottom"
    | 
      ## All cells in the same row as a cell whose valign attribute has this value should have their textual data positioned so that the first text line occurs on a baseline common to all cells in the row. This constraint does not apply to subsequent text lines in these cells.
      "baseline"
  }?
db.html.table.attributes =
  
  ## Provides a summary of the table's purpose and structure for user agents rendering to non-visual media such as speech and Braille.
  attribute summary { text }?
  & 
    ## Specifies the desired width of the entire table and is intended for visual user agents. When the value is a percentage value, the value is relative to the user agent's available horizontal space. In the absence of any width specification, table width is determined by the user agent.
    attribute width {
      xsd:integer >> a:documentation [ "An explicit width." ]
      | xsd:string { pattern = "[0-9]+%" }
        >> a:documentation [ "A percentage width." ]
    }?
  & 
    ## Specifies the width (in pixels only) of the frame around a table.
    attribute border { xsd:nonNegativeInteger }?
  & 
    ## Specifies which sides of the frame surrounding a table will be visible.
    attribute frame {
      
      ## No sides. This is the default value.
      "void"
      | 
        ## The top side only.
        "above"
      | 
        ## The bottom side only.
        "below"
      | 
        ## The top and bottom sides only.
        "hsides"
      | 
        ## The left-hand side only.
        "lhs"
      | 
        ## The right-hand side only.
        "rhs"
      | 
        ## The right and left sides only.
        "vsides"
      | 
        ## All four sides.
        "box"
      | 
        ## All four sides.
        "border"
    }?
  & 
    ## Specifies which rules will appear between cells within a table. The rendering of rules is user agent dependent.
    attribute rules {
      
      ## No rules. This is the default value.
      "none"
      | 
        ## Rules will appear between row groups (see thead, tfoot, and tbody) and column groups (see colgroup and col) only.
        "groups"
      | 
        ## Rules will appear between rows only.
        "rows"
      | 
        ## Rules will appear between columns only.
        "cols"
      | 
        ## Rules will appear between all rows and columns.
        "all"
    }?
  & 
    ## Specifies how much space the user agent should leave between the left side of the table and the left-hand side of the leftmost column, the top of the table and the top side of the topmost row, and so on for the right and bottom of the table. The attribute also specifies the amount of space to leave between cells.
    attribute cellspacing {
      xsd:integer >> a:documentation [ "An explicit spacing." ]
      | xsd:string { pattern = "[0-9]+%" }
        >> a:documentation [ "A percentage spacing." ]
    }?
  & 
    ## Specifies the amount of space between the border of the cell and its contents. If the value of this attribute is a pixel length, all four margins should be this distance from the contents. If the value of the attribute is a percentage length, the top and bottom margins should be equally separated from the content based on a percentage of the available vertical space, and the left and right margins should be equally separated from the content based on a percentage of the available horizontal space.
    attribute cellpadding {
      xsd:integer >> a:documentation [ "An explicit padding." ]
      | xsd:string { pattern = "[0-9]+%" }
        >> a:documentation [ "A percentage padding." ]
    }?
db.html.tablecell.attributes =
  
  ## Provides an abbreviated form of the cell's content and may be rendered by user agents when appropriate in place of the cell's content. Abbreviated names should be short since user agents may render them repeatedly. For instance, speech synthesizers may render the abbreviated headers relating to a particular cell before rendering that cell's content.
  attribute abbr { text }?
  & 
    ## This attribute may be used to place a cell into conceptual categories that can be considered to form axes in an n-dimensional space. User agents may give users access to these categories (e.g., the user may query the user agent for all cells that belong to certain categories, the user agent may present a table in the form of a table of contents, etc.). Please consult an HTML reference for more details.
    attribute axis { text }?
  & 
    ## Specifies the list of header cells that provide header information for the current data cell. The value of this attribute is a space-separated list of cell names; those cells must be named by setting their id attribute. Authors generally use the headers attribute to help non-visual user agents render header information about data cells (e.g., header information is spoken prior to the cell data), but the attribute may also be used in conjunction with style sheets.
    attribute headers { text }?
  & 
    ## Specifies the set of data cells for which the current header cell provides header information. This attribute may be used in place of the headers attribute, particularly for simple tables.
    attribute scope {
      
      ## The current cell provides header information for the rest of the row that contains it
      "row"
      | 
        ## The current cell provides header information for the rest of the column that contains it.
        "col"
      | 
        ## The header cell provides header information for the rest of the row group that contains it.
        "rowgroup"
      | 
        ## The header cell provides header information for the rest of the column group that contains it.
        "colgroup"
    }?
  & 
    ## Specifies the number of rows spanned by the current cell. The default value of this attribute is one (1
    ## ). The value zero (0
    ## ) means that the cell spans all rows from the current row to the last row of the table section (thead
    ## , tbody
    ## , or tfoot
    ## ) in which the cell is defined.
    attribute rowspan { xsd:nonNegativeInteger }?
  & 
    ## Specifies the number of columns spanned by the current cell. The default value of this attribute is one (1
    ## ). The value zero (0
    ## ) means that the cell spans all columns from the current column to the last column of the column group (colgroup
    ## ) in which the cell is defined.
    attribute colspan { xsd:nonNegativeInteger }?
db.html.table.info = db._info.title.forbidden
db.html.table.model =
  db.html.table.info?,
  db.html.caption,
  (db.html.col* | db.html.colgroup*),
  db.html.thead?,
  db.html.tfoot?,
  (db.html.tbody+ | db.html.tr+)
db.html.informaltable.info = db._info.title.forbidden
db.html.informaltable.model =
  db.html.informaltable.info?,
  (db.html.col* | db.html.colgroup*),
  db.html.thead?,
  db.html.tfoot?,
  (db.html.tbody+ | db.html.tr+)
div {
  db.html.table.role.attribute = attribute role { text }
  db.html.table.label.attribute = db.label.attribute
  db.html.table.type.attribute =
    
    ## Identifies the type of table
    attribute type { text }?
  db.html.table.attlist =
    db.html.attrs
    & db.html.table.attributes
    & db.html.table.role.attribute?
    & db.html.table.type.attribute?
    & db.html.table.label.attribute?
    & db.orient.attribute?
    & db.pgwide.attribute?
    & db.tabstyle.attribute?
    & db.floatstyle.attribute?
  db.html.table =
    
    ## A formal (captioned) HTML table in a document
    [
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:table"
          s:assert [
            test = "not(.//db:example)"
            "example must not occur among the children or descendants of table"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:table"
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur among the children or descendants of table"
          ]
        ]
      ]
    ]
    element table { db.html.table.attlist, db.html.table.model }
}
div {
  db.html.informaltable.role.attribute = attribute role { text }
  db.html.informaltable.label.attribute = db.label.attribute
  db.html.informaltable.type.attribute =
    
    ## Identifies the type of table
    attribute type { text }?
  db.html.informaltable.attlist =
    db.html.attrs
    & db.html.table.attributes
    & db.html.informaltable.role.attribute?
    & db.html.informaltable.type.attribute?
    & db.html.informaltable.label.attribute?
    & db.orient.attribute?
    & db.pgwide.attribute?
    & db.tabstyle.attribute?
    & db.floatstyle.attribute?
  db.html.informaltable =
    
    ## An HTML table without a title
    element informaltable {
      db.html.informaltable.attlist, db.html.informaltable.model
    }
}
div {
  db.html.caption.attlist = db.html.attrs
  db.html.caption =
    
    ## An HTML table caption
    [
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:caption"
          s:assert [
            test = "not(.//db:note)"
            "note must not occur among the children or descendants of caption"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:caption"
          s:assert [
            test = "not(.//db:example)"
            "example must not occur among the children or descendants of caption"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:caption"
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur among the children or descendants of caption"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:caption"
          s:assert [
            test = "not(.//db:table)"
            "table must not occur among the children or descendants of caption"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:caption"
          s:assert [
            test = "not(.//db:sidebar)"
            "sidebar must not occur among the children or descendants of caption"
          ]
        ]
      ]
    ]
    element caption { db.html.caption.attlist, db.all.inlines* }
}
div {
  db.html.col.attlist =
    db.html.attrs
    & 
      ## This attribute, whose value must be an integer > 0, specifies the number of columns spanned
      ##  by the col
      ##  element; the col
      ##  element shares its attributes with all the columns it spans. The default value for this attribute is 1 (i.e., a single column). If the span attribute is set to N > 1, the current col
      ##  element shares its attributes with the next N-1 columns.
      attribute span { xsd:nonNegativeInteger }?
    & 
      ## Specifies a default width for each column spanned by the current col
      ##  element. It has the same meaning as the width
      ##  attribute for the colgroup
      ##  element and overrides it.
      attribute width { text }?
    & db.html.cellhalign
    & db.html.cellvalign
  db.html.col =
    
    ## Specifications for a column in an HTML table
    element col { db.html.col.attlist, empty }
}
div {
  db.html.colgroup.attlist =
    db.html.attrs
    & 
      ## This attribute, which must be an integer > 0, specifies the number of columns in a column group. In the absence of a span attribute, each colgroup
      ##  defines a column group containing one column. If the span attribute is set to N > 0, the current colgroup
      ##  element defines a column group containing N columns. User agents must ignore this attribute if the colgroup
      ##  element contains one or more col
      ##  elements.
      attribute span { xsd:nonNegativeInteger }?
    & 
      ## This attribute specifies a default width for each column in the current column group. In addition to the standard pixel, percentage, and relative values, this attribute allows the special form 0*
      ##  (zero asterisk) which means that the width of the each column in the group should be the minimum width necessary to hold the column's contents. This implies that a column's entire contents must be known before its width may be correctly computed. Authors should be aware that specifying 0*
      ##  will prevent visual user agents from rendering a table incrementally. This attribute is overridden for any column in the column group whose width is specified via a col
      ##  element.
      attribute width { text }?
    & db.html.cellhalign
    & db.html.cellvalign
  db.html.colgroup =
    
    ## A group of columns in an HTML table
    element colgroup { db.html.colgroup.attlist, db.html.col* }
}
div {
  db.html.thead.attlist =
    db.html.attrs & db.html.cellhalign & db.html.cellvalign
  db.html.thead =
    
    ## A table header consisting of one or more rows in an HTML table
    element thead { db.html.thead.attlist, db.html.tr+ }
}
div {
  db.html.tfoot.attlist =
    db.html.attrs & db.html.cellhalign & db.html.cellvalign
  db.html.tfoot =
    
    ## A table footer consisting of one or more rows in an HTML table
    element tfoot { db.html.tfoot.attlist, db.html.tr+ }
}
div {
  db.html.tbody.attlist =
    db.html.attrs & db.html.cellhalign & db.html.cellvalign
  db.html.tbody =
    
    ## A wrapper for the rows of an HTML table or informal HTML table
    element tbody { db.html.tbody.attlist, db.html.tr+ }
}
div {
  db.html.tr.attlist =
    db.html.attrs & db.html.cellhalign & db.html.cellvalign
  db.html.tr =
    
    ## A row in an HTML table
    element tr { db.html.tr.attlist, (db.html.th | db.html.td)+ }
}
div {
  db.html.th.attlist =
    db.html.attrs
    & db.html.tablecell.attributes
    & db.html.cellhalign
    & db.html.cellvalign
  db.html.th =
    
    ## A table header entry in an HTML table
    element th {
      db.html.th.attlist, (db.all.inlines* | db.all.blocks*)
    }
}
div {
  db.html.td.attlist =
    db.html.attrs
    & db.html.tablecell.attributes
    & db.html.cellhalign
    & db.html.cellvalign
  db.html.td =
    
    ## A table entry in an HTML table
    element td {
      db.html.td.attlist, (db.all.inlines* | db.all.blocks*)
    }
}
db.computeroutput.inlines =
  (text | db.ubiq.inlines | db.os.inlines | db.technical.inlines)
  | db.markup.inlines
db.userinput.inlines =
  (text | db.ubiq.inlines | db.os.inlines | db.technical.inlines)
  | db.markup.inlines
div {
  db.filename.class.enumeration =
    
    ## A device
    "devicefile"
    | 
      ## A directory
      "directory"
    | 
      ## A filename extension
      "extension"
    | 
      ## A header file (as for a programming language)
      "headerfile"
    | 
      ## A library file
      "libraryfile"
    | 
      ## A partition (as of a hard disk)
      "partition"
    | 
      ## A symbolic link
      "symlink"
  db.filename.class.attribute =
    
    ## Identifies the class of filename
    attribute class { db.filename.class.enumeration }
  db.filename.path.attribute =
    
    ## Specifies the path of the filename
    attribute path { text }
  db.filename.role.attribute = attribute role { text }
  db.filename.attlist =
    db.filename.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.filename.path.attribute?
    & db.filename.class.attribute?
  db.filename =
    
    ## The name of a file
    element filename { db.filename.attlist, db._text }
}
div {
  db.command.role.attribute = attribute role { text }
  db.command.attlist =
    db.command.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.command =
    
    ## The name of an executable program or other software command
    element command { db.command.attlist, db._text }
}
div {
  db.computeroutput.role.attribute = attribute role { text }
  db.computeroutput.attlist =
    db.computeroutput.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.computeroutput =
    
    ## Data, generally text, displayed or presented by a computer
    element computeroutput {
      db.computeroutput.attlist, db.computeroutput.inlines*
    }
}
div {
  db.userinput.role.attribute = attribute role { text }
  db.userinput.attlist =
    db.userinput.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.userinput =
    
    ## Data entered by the user
    element userinput { db.userinput.attlist, db.userinput.inlines* }
}
db.os.inlines =
  db.filename | db.command | db.computeroutput | db.userinput
div {
  db.programlisting.role.attribute = attribute role { text }
  db.programlisting.width.attribute = db.width.characters.attribute
  db.programlisting.attlist =
    db.programlisting.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.verbatim.attributes
    & db.programlisting.width.attribute?
  db.programlisting =
    
    ## A literal listing of all or part of a program
    element programlisting {
      db.programlisting.attlist, db.verbatim.contentmodel
    }
}
db.programming.inlines = empty
db.systemitem.inlines = db._text
div {
  db.systemitem.class.enumeration =
    
    ## A daemon or other system process (syslogd)
    "daemon"
    | 
      ## A domain name (example.com)
      "domainname"
    | 
      ## An ethernet address (00:05:4E:49:FD:8E)
      "etheraddress"
    | 
      ## An event of some sort (SIGHUP)
      "event"
    | 
      ## An event handler of some sort (hangup)
      "eventhandler"
    | 
      ## A filesystem (ext3)
      "filesystem"
    | 
      ## A fully qualified domain name (my.example.com)
      "fqdomainname"
    | 
      ## A group name (wheel)
      "groupname"
    | 
      ## A network interface (eth0)
      "interface"
    | 
      ## An IP address (127.0.0.1)
      "ipaddress"
    | 
      ## A library (libncurses)
      "library"
    | 
      ## A macro
      "macro"
    | 
      ## A netmask (255.255.255.192)
      "netmask"
    | 
      ## A newsgroup (comp.text.xml)
      "newsgroup"
    | 
      ## An operating system name (Hurd)
      "osname"
    | 
      ## A process (gnome-cups-icon)
      "process"
    | 
      ## A protocol (ftp)
      "protocol"
    | 
      ## A resource
      "resource"
    | 
      ## A security context (a role, permission, or security token, for example)
      "securitycontext"
    | 
      ## A server (mail.example.com)
      "server"
    | 
      ## A service (ppp)
      "service"
    | 
      ## A system name (hephaistos)
      "systemname"
    | 
      ## A user name (ndw)
      "username"
  db.systemitem.class-enum.attribute =
    
    ## Identifies the nature of the system item
    attribute class { db.systemitem.class.enumeration }?
  db.systemitem.class-other.attribute =
    
    ## Identifies the nature of the non-standard system item
    attribute otherclass { xsd:NMTOKEN }
  db.systemitem.class-other.attributes =
    
    ## Identifies the kind of systemitemgraphic identifier
    attribute class {
      
      ## Indicates that the system item is some 'other' kind.
      "other"
    }
    & db.systemitem.class-other.attribute
  db.systemitem.class.attribute =
    db.systemitem.class-enum.attribute
    | db.systemitem.class-other.attributes
  db.systemitem.role.attribute = attribute role { text }
  db.systemitem.attlist =
    db.systemitem.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.systemitem.class.attribute?
  db.systemitem =
    
    ## A system-related item or term
    element systemitem { db.systemitem.attlist, db.systemitem.inlines* }
}
div {
  db.option.role.attribute = attribute role { text }
  db.option.attlist =
    db.option.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.option =
    
    ## An option for a software command
    element option { db.option.attlist, db._text }
}
div {
  db.literal.role.attribute = attribute role { text }
  db.literal.attlist =
    db.literal.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.literal =
    
    ## Inline text that is some literal value
    element literal { db.literal.attlist, db._text }
}
db.markup.inlines = db.literal | db.email
db.admonition.contentmodel = db._info.title.only, db.all.blocks+
div {
  db.note.role.attribute = attribute role { text }
  db.note.attlist =
    db.note.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.note =
    
    ## A message set off from the text
    [
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:note"
          s:assert [
            test = "not(.//db:note)"
            "note must not occur among the children or descendants of note"
          ]
        ]
      ]
    ]
    element note { db.note.attlist, db.admonition.contentmodel }
}
db.admonition.blocks = db.note
db.endterm.attribute =
  
  ## Points to the element whose content is to be used as the text of the link
  attribute endterm { xsd:IDREF }
db.linkend.attribute =
  
  ## Points to an internal link target by identifying the value of its xml:id attribute
  attribute linkend { xsd:IDREF }
db.xlink.href.attribute =
  
  ## Identifies a link target with a URI
  attribute xlink:href { xsd:anyURI }
db.xlink.simple.type.attribute =
  
  ## Identifies the XLink link type
  attribute xlink:type {
    
    ## An XLink simple link type
    "simple"
  }
db.xlink.role.attribute =
  
  ## Identifies the XLink role of the link
  attribute xlink:role { xsd:anyURI }
db.xlink.arcrole.attribute =
  
  ## Identifies the XLink arcrole of the link
  attribute xlink:arcrole { xsd:anyURI }
db.xlink.title.attribute =
  
  ## Identifies the XLink title of the link
  attribute xlink:title { text }
db.xlink.show.enumeration =
  
  ## An application traversing to the ending resource should load it in a new window, frame, pane, or other relevant presentation context.
  "new"
  | 
    ## An application traversing to the ending resource should load the resource in the same window, frame, pane, or other relevant presentation context in which the starting resource was loaded.
    "replace"
  | 
    ## An application traversing to the ending resource should load its presentation in place of the presentation of the starting resource.
    "embed"
  | 
    ## The behavior of an application traversing to the ending resource is unconstrained by XLink. The application should look for other markup present in the link to determine the appropriate behavior.
    "other"
  | 
    ## The behavior of an application traversing to the ending resource is unconstrained by this specification. No other markup is present to help the application determine the appropriate behavior.
    "none"
db.xlink.show.attribute =
  
  ## Identifies the XLink show behavior of the link
  attribute xlink:show { db.xlink.show.enumeration }
db.xlink.actuate.enumeration =
  
  ## An application should traverse to the ending resource immediately on loading the starting resource.
  "onLoad"
  | 
    ## An application should traverse from the starting resource to the ending resource only on a post-loading event triggered for the purpose of traversal.
    "onRequest"
  | 
    ## The behavior of an application traversing to the ending resource is unconstrained by this specification. The application should look for other markup present in the link to determine the appropriate behavior.
    "other"
  | 
    ## The behavior of an application traversing to the ending resource is unconstrained by this specification. No other markup is present to help the application determine the appropriate behavior.
    "none"
db.xlink.actuate.attribute =
  
  ## Identifies the XLink actuate behavior of the link
  attribute xlink:actuate { db.xlink.actuate.enumeration }
db.xlink.simple.link.attributes =
  db.xlink.simple.type.attribute?
  & db.xlink.href.attribute?
  & db.xlink.role.attribute?
  & db.xlink.arcrole.attribute?
  & db.xlink.title.attribute?
  & db.xlink.show.attribute?
  & db.xlink.actuate.attribute?
db.xlink.attributes = db.xlink.simple.link.attributes
db.xrefstyle.attribute =
  
  ## Specifies a keyword or keywords identifying additional style information
  attribute xrefstyle { text }
db.common.linking.attributes =
  (db.linkend.attribute | db.xlink.attributes)?
db.common.req.linking.attributes =
  db.linkend.attribute | db.xlink.attributes
db.common.data.attributes =
  
  ## Specifies the format of the data
  attribute format { text }?,
  (
   ## Indentifies the location of the data by URI
   attribute fileref { xsd:anyURI }
   | 
     ## Identifies the location of the data by external identifier (entity name)
     attribute entityref { xsd:ENTITY })
db.verbatim.continuation.enumeration =
  
  ## Line numbering continues from the immediately preceding element with the same name.
  "continues"
  | 
    ## Line numbering restarts (begins at 1, usually).
    "restarts"
db.verbatim.continuation.attribute =
  
  ## Determines whether line numbering continues from the previous element or restarts
  attribute continuation { db.verbatim.continuation.enumeration }
db.verbatim.linenumbering.enumeration =
  
  ## Lines are numbered.
  "numbered"
  | 
    ## Lines are not numbered.
    "unnumbered"
db.verbatim.linenumbering.attribute =
  
  ## Determines whether lines are numbered
  attribute linenumbering { db.verbatim.linenumbering.enumeration }
db.verbatim.startinglinenumber.attribute =
  
  ## Specifies the initial line number
  attribute startinglinenumber { xsd:integer }
db.verbatim.language.attribute =
  
  ## Identifies the language (i.e. programming language) of the verbatim content
  attribute language { text }
db.verbatim.xml.space.attribute =
  
  ## Can be used to indicate explicitly that whitespace in the verbatim environment is preserved. Whitespace must always be preserved in verbatim environments whether this attribute is specified or not
  attribute xml:space {
    
    ## Whitespace must be preserved.
    "preserve"
  }
db.verbatim.common.attributes =
  db.verbatim.continuation.attribute?
  & db.verbatim.linenumbering.attribute?
  & db.verbatim.startinglinenumber.attribute?
  & db.verbatim.xml.space.attribute?
db.verbatim.attributes =
  db.verbatim.common.attributes & db.verbatim.language.attribute?
db.label.attribute =
  
  ## Specifies an identifying string for presentation purposes
  attribute label { text }
db.width.characters.attribute =
  
  ## Specifies the width (in characters) of the element
  attribute width { xsd:nonNegativeInteger }
db.spacing.enumeration =
  
  ## The spacing should be "compact".
  "compact"
  | 
    ## The spacing should be "normal".
    "normal"
db.spacing.attribute =
  
  ## Specifies (a hint about) the spacing of the content
  attribute spacing { db.spacing.enumeration }
db.pgwide.enumeration =
  
  ## The element should be rendered in the current text flow (with the flow column width).
  "0"
  | 
    ## The element should be rendered across the full text page.
    "1"
db.pgwide.attribute =
  
  ## Indicates if the element is rendered across the column or the page
  attribute pgwide { db.pgwide.enumeration }
db.floatstyle.attribute =
  
  ## Specifies style information to be used when rendering the float
  attribute floatstyle { text }
db.width.attribute =
  
  ## Specifies the width of the element
  attribute width { text }
db.depth.attribute =
  
  ## Specifies the depth of the element
  attribute depth { text }
db.contentwidth.attribute =
  
  ## Specifies the width of the content rectangle
  attribute contentwidth { text }
db.contentdepth.attribute =
  
  ## Specifies the depth of the content rectangle
  attribute contentdepth { text }
db.scalefit.enumeration =
  
  ## False (do not scale-to-fit; anamorphic scaling may occur)
  "0"
  | 
    ## True (scale-to-fit; anamorphic scaling is forbidden)
    "1"
db.scale.attribute =
  
  ## Specifies the scaling factor
  attribute scale { xsd:positiveInteger }
db.classid.attribute =
  
  ## Specifies a classid for a media object player
  attribute classid { text }
db.autoplay.attribute =
  
  ## Specifies the autoplay setting for a media object player
  attribute autoplay { text }
db.halign.enumeration =
  
  ## Centered horizontally
  "center"
  | 
    ## Aligned horizontally on the specified character
    "char"
  | 
    ## Fully justified (left and right margins or edges)
    "justify"
  | 
    ## Left aligned
    "left"
  | 
    ## Right aligned
    "right"
db.valign.enumeration =
  
  ## Aligned on the bottom of the region
  "bottom"
  | 
    ## Centered vertically
    "middle"
  | 
    ## Aligned on the top of the region
    "top"
db.pubwork.enumeration =
  
  ## An article
  "article"
  | 
    ## A bulletin board system
    "bbs"
  | 
    ## A book
    "book"
  | 
    ## A CD-ROM
    "cdrom"
  | 
    ## A chapter (as of a book)
    "chapter"
  | 
    ## A DVD
    "dvd"
  | 
    ## An email message
    "emailmessage"
  | 
    ## A gopher page
    "gopher"
  | 
    ## A journal
    "journal"
  | 
    ## A manuscript
    "manuscript"
  | 
    ## A posting to a newsgroup
    "newsposting"
  | 
    ## A part (as of a book)
    "part"
  | 
    ## A reference entry
    "refentry"
  | 
    ## A section (as of a book or article)
    "section"
  | 
    ## A series
    "series"
  | 
    ## A set (as of books)
    "set"
  | 
    ## A web page
    "webpage"
  | 
    ## A wiki page
    "wiki"
  | 
    ## Some other kind of work
    "other"
db.biblio.pubwork.enumeration = db.pubwork.enumeration
db.biblio.pubwork-enum.attribute =
  
  ## Identifies the nature of the published work
  attribute pubwork { db.biblio.pubwork.enumeration }?
db.biblio.pubwork-other.attribute =
  
  ## Identifies the nature of some other kind of published work
  attribute otherpubwork { xsd:NMTOKEN }
db.biblio.pubwork-other.attributes =
  
  ## Identifies that this is some other kind of published work
  attribute pubwork {
    
    ## Indicates that the published work is some 'other' kind.
    "other"
  }
  & db.biblio.pubwork-other.attribute
db.biblio.pubwork.attribute =
  db.biblio.pubwork-enum.attribute | db.biblio.pubwork-other.attributes
db._text = (text | db.ubiq.inlines | db._phrase | db.replaceable)*
db._title = db.title? & db.titleabbrev? & db.subtitle?
db._title.req = db.title & db.titleabbrev? & db.subtitle?
db._title.only = db.title? & db.titleabbrev?
db._title.onlyreq = db.title & db.titleabbrev?
db._info = (db._title, db.titleforbidden.info?) | db.info?
db._info.title.req =
  (db._title.req, db.titleforbidden.info?) | db.titlereq.info
db._info.title.only =
  (db._title.only, db.titleforbidden.info?) | db.titleonly.info
db._info.title.onlyreq =
  (db._title.onlyreq, db.titleforbidden.info?) | db.titleonlyreq.info
db._info.title.forbidden = db.titleforbidden.info?
db.all.inlines =
  text
  | db.ubiq.inlines
  | db.general.inlines
  | db.domain.inlines
  | db.extension.inlines
db.general.inlines =
  db.publishing.inlines
  | db.product.inlines
  | db.bibliography.inlines
  | db.graphic.inlines
  | db.link.inlines
db.domain.inlines =
  db.technical.inlines
  | db.os.inlines
  | db.programming.inlines
  | db.markup.inlines
db.graphic.inlines = db.inlinemediaobject
db.extension.inlines = notAllowed
db.all.blocks =
  (db.nopara.blocks | db.para.blocks | db.extension.blocks)
  | sl.speakernotes
db.extension.blocks = notAllowed
div {
  db.title.role.attribute = attribute role { text }
  db.title.attlist =
    db.title.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.title =
    
    ## The text of the title of a section of a document or of a formal block-level element
    element title { db.title.attlist, db.all.inlines* }
}
div {
  db.titleabbrev.role.attribute = attribute role { text }
  db.titleabbrev.attlist =
    db.titleabbrev.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.titleabbrev =
    
    ## The abbreviation of a title
    element titleabbrev { db.titleabbrev.attlist, db.all.inlines* }
}
div {
  db.subtitle.role.attribute = attribute role { text }
  db.subtitle.attlist =
    db.subtitle.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.subtitle =
    
    ## The subtitle of a document
    element subtitle { db.subtitle.attlist, db.all.inlines* }
}
div {
  db.info.role.attribute = attribute role { text }
  db.info.attlist = db.info.role.attribute? & db.common.attributes
  db.info =
    
    ## A wrapper for information about a component or other block
    element info { db.info.attlist, (db._title & db.info.elements*) }
}
div {
  db.titlereq.info.role.attribute = attribute role { text }
  db.titlereq.info.attlist =
    db.titlereq.info.role.attribute? & db.common.attributes
  db.titlereq.info =
    
    ## A wrapper for information about a component or other block with a required title
    element info {
      db.titlereq.info.attlist, (db._title.req & db.info.elements*)
    }
}
div {
  db.titleonly.info.role.attribute = attribute role { text }
  db.titleonly.info.attlist =
    db.titleonly.info.role.attribute? & db.common.attributes
  db.titleonly.info =
    
    ## A wrapper for information about a component or other block with only a title
    element info {
      db.titleonly.info.attlist, (db._title.only & db.info.elements*)
    }
}
div {
  db.titleonlyreq.info.role.attribute = attribute role { text }
  db.titleonlyreq.info.attlist =
    db.titleonlyreq.info.role.attribute? & db.common.attributes
  db.titleonlyreq.info =
    
    ## A wrapper for information about a component or other block with only a required title
    element info {
      db.titleonlyreq.info.attlist,
      (db._title.onlyreq & db.info.elements*)
    }
}
div {
  db.titleforbidden.info.role.attribute = attribute role { text }
  db.titleforbidden.info.attlist =
    db.titleforbidden.info.role.attribute? & db.common.attributes
  db.titleforbidden.info =
    
    ## A wrapper for information about a component or other block without a title
    element info { db.titleforbidden.info.attlist, db.info.elements* }
}
div {
  db.subjectset.role.attribute = attribute role { text }
  db.subjectset.scheme.attribute =
    
    ## Identifies the controlled vocabulary used by this set's terms
    attribute scheme { xsd:NMTOKEN }
  db.subjectset.attlist =
    db.subjectset.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.subjectset.scheme.attribute?
  db.subjectset =
    
    ## A set of terms describing the subject matter of a document
    element subjectset { db.subjectset.attlist, db.subject+ }
}
div {
  db.subject.role.attribute = attribute role { text }
  db.subject.weight.attribute =
    
    ## Specifies a ranking for this subject relative to other subjects in the same set
    attribute weight { text }
  db.subject.attlist =
    db.subject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.subject.weight.attribute?
  db.subject =
    
    ## One of a group of terms describing the subject matter of a document
    element subject { db.subject.attlist, db.subjectterm+ }
}
div {
  db.subjectterm.role.attribute = attribute role { text }
  db.subjectterm.attlist =
    db.subjectterm.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.subjectterm =
    
    ## A term in a group of terms describing the subject matter of a document
    element subjectterm { db.subjectterm.attlist, text }
}
div {
  db.keywordset.role.attribute = attribute role { text }
  db.keywordset.attlist =
    db.keywordset.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.keywordset =
    
    ## A set of keywords describing the content of a document
    element keywordset { db.keywordset.attlist, db.keyword+ }
}
div {
  db.keyword.role.attribute = attribute role { text }
  db.keyword.attlist =
    db.keyword.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.keyword =
    
    ## One of a set of keywords describing the content of a document
    element keyword { db.keyword.attlist, text }
}
db.table.choice = notAllowed | db.cals.table | db.html.table
db.informaltable.choice =
  notAllowed | db.cals.informaltable | db.html.informaltable
db.table = db.table.choice
db.informaltable = db.informaltable.choice
div {
  db.sidebar.floatstyle.attribute = db.floatstyle.attribute
  db.sidebar.role.attribute = attribute role { text }
  db.sidebar.attlist =
    db.sidebar.role.attribute?
    & db.sidebar.floatstyle.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.sidebar.info = db._info
  db.sidebar =
    
    ## A portion of a document that is isolated from the main narrative flow
    [
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:sidebar"
          s:assert [
            test = "not(.//db:sidebar)"
            "sidebar must not occur among the children or descendants of sidebar"
          ]
        ]
      ]
    ]
    element sidebar {
      db.sidebar.attlist, db.sidebar.info, db.all.blocks+
    }
}
div {
  db.abstract.role.attribute = attribute role { text }
  db.abstract.attlist =
    db.abstract.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.abstract.info = db._info.title.only
  db.abstract =
    
    ## A summary
    element abstract {
      db.abstract.attlist, db.abstract.info, db.all.blocks+
    }
}
div {
  db.personblurb.role.attribute = attribute role { text }
  db.personblurb.attlist =
    db.personblurb.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.personblurb.info = db._info.title.only
  db.personblurb =
    
    ## A short description or note about a person
    element personblurb {
      db.personblurb.attlist, db.personblurb.info, db.para.blocks+
    }
}
div {
  db.blockquote.role.attribute = attribute role { text }
  db.blockquote.attlist =
    db.blockquote.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.blockquote.info = db._info.title.only
  db.blockquote =
    
    ## A quotation set off from the main text
    element blockquote {
      db.blockquote.attlist,
      db.blockquote.info,
      db.attribution?,
      db.all.blocks+
    }
}
div {
  db.attribution.role.attribute = attribute role { text }
  db.attribution.attlist =
    db.attribution.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
}
div {
  db.epigraph.role.attribute = attribute role { text }
  db.epigraph.attlist =
    db.epigraph.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.epigraph.info = db._info.title.forbidden
  db.epigraph =
    
    ## A short inscription at the beginning of a document or component
    element epigraph {
      db.epigraph.attlist,
      db.epigraph.info,
      db.attribution?,
      (db.para.blocks | db.literallayout)+
    }
}
div {
  db.footnote.role.attribute = attribute role { text }
  db.footnote.label.attribute =
    
    ## Identifies the desired footnote mark
    attribute label { xsd:NMTOKEN }
  db.footnote.attlist =
    db.footnote.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.footnote.label.attribute?
  db.footnote =
    
    ## A footnote
    [
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:footnote"
          s:assert [
            test = "not(.//db:note)"
            "note must not occur among the children or descendants of footnote"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:footnote"
          s:assert [
            test = "not(.//db:footnote)"
            "footnote must not occur among the children or descendants of footnote"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:footnote"
          s:assert [
            test = "not(.//db:example)"
            "example must not occur among the children or descendants of footnote"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:footnote"
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur among the children or descendants of footnote"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:footnote"
          s:assert [
            test = "not(.//db:table)"
            "table must not occur among the children or descendants of footnote"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:footnote"
          s:assert [
            test = "not(.//db:sidebar)"
            "sidebar must not occur among the children or descendants of footnote"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:footnote"
          s:assert [
            test = "not(.//db:epigraph)"
            "epigraph must not occur among the children or descendants of footnote"
          ]
        ]
      ]
    ]
    element footnote { db.footnote.attlist, db.all.blocks+ }
}
div {
  db.para.role.attribute = attribute role { text }
  db.para.attlist =
    db.para.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.para.info = db._info.title.forbidden
}
div {
  db.itemizedlist.role.attribute = attribute role { text }
  db.itemizedlist.mark.attribute =
    
    ## Identifies the type of mark to be used on items in this list
    attribute mark { xsd:NMTOKEN }
  db.itemizedlist.attlist =
    db.itemizedlist.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.spacing.attribute?
    & db.itemizedlist.mark.attribute?
  db.itemizedlist.info = db._info.title.only
  db.itemizedlist =
    
    ## A list in which each entry is marked with a bullet or other dingbat
    element itemizedlist {
      db.itemizedlist.attlist,
      db.itemizedlist.info,
      db.all.blocks*,
      db.listitem+
    }
}
div {
  db.orderedlist.role.attribute = attribute role { text }
  db.orderedlist.continuation.enumeration =
    
    ## Specifies that numbering should begin where the preceding list left off
    "continues"
    | 
      ## Specifies that numbering should begin again at 1
      "restarts"
  db.orderedlist.continuation.attribute =
    
    ## Indicates how list numbering should begin relative to the immediately preceding list
    attribute continuation { db.orderedlist.continuation.enumeration }
  db.orderedlist.startingnumber.attribute =
    
    ## Specifies the initial line number
    attribute startingnumber { xsd:integer }
  db.orderedlist.inheritnum.enumeration =
    
    ## Specifies that numbering should ignore list nesting
    "ignore"
    | 
      ## Specifies that numbering should inherit from outer-level lists
      "inherit"
  db.orderedlist.inheritnum.attribute =
    
    ## Indicates whether or not item numbering should be influenced by list nesting
    attribute inheritnum { db.orderedlist.inheritnum.enumeration }
  db.orderedlist.numeration.enumeration =
    
    ## Specifies Arabic numeration (1, 2, 3, …)
    "arabic"
    | 
      ## Specifies upper-case alphabetic numeration (A, B, C, …)
      "upperalpha"
    | 
      ## Specifies lower-case alphabetic numeration (a, b, c, …)
      "loweralpha"
    | 
      ## Specifies upper-case Roman numeration (I, II, III, …)
      "upperroman"
    | 
      ## Specifies lower-case Roman numeration (i, ii, iii …)
      "lowerroman"
  db.orderedlist.numeration.attribute =
    
    ## Indicates the desired numeration
    attribute numeration { db.orderedlist.numeration.enumeration }
  db.orderedlist.attlist =
    db.orderedlist.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.spacing.attribute?
    & (db.orderedlist.continuation.attribute
       | db.orderedlist.startingnumber.attribute)?
    & db.orderedlist.inheritnum.attribute?
    & db.orderedlist.numeration.attribute?
  db.orderedlist.info = db._info.title.only
  db.orderedlist =
    
    ## A list in which each entry is marked with a sequentially incremented label
    element orderedlist {
      db.orderedlist.attlist,
      db.orderedlist.info,
      db.all.blocks*,
      db.listitem+
    }
}
div {
  db.listitem.role.attribute = attribute role { text }
  db.listitem.override.attribute =
    
    ## Specifies the keyword for the type of mark that should be used on this
    ##  item, instead of the mark that would be used by default
    attribute override { xsd:NMTOKEN }
  db.listitem.attlist =
    db.listitem.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.listitem.override.attribute?
  db.listitem.info = db._info.title.forbidden
  db.listitem =
    
    ## A wrapper for the elements of a list item
    element listitem {
      db.listitem.attlist, db.listitem.info, db.all.blocks+
    }
}
div {
  db.variablelist.role.attribute = attribute role { text }
  db.variablelist.termlength.attribute =
    
    ## Indicates a length beyond which the presentation system may consider a term too long and select an alternate presentation for that term, item, or list
    attribute termlength { text }
  db.variablelist.attlist =
    db.variablelist.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.spacing.attribute?
    & db.variablelist.termlength.attribute?
  db.variablelist.info = db._info.title.only
  db.variablelist =
    
    ## A list in which each entry is composed of a set of one or more terms and an associated description
    element variablelist {
      db.variablelist.attlist,
      db.variablelist.info,
      db.all.blocks*,
      db.varlistentry+
    }
}
div {
  db.varlistentry.role.attribute = attribute role { text }
  db.varlistentry.attlist =
    db.varlistentry.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.varlistentry =
    
    ## A wrapper for a set of terms and the associated description in a variable list
    element varlistentry {
      db.varlistentry.attlist, db.term+, db.listitem
    }
}
div {
  db.term.role.attribute = attribute role { text }
  db.term.attlist =
    db.term.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.term =
    
    ## The word or phrase being defined or described in a variable list
    element term { db.term.attlist, db.all.inlines* }
}
div {
  db.example.role.attribute = attribute role { text }
  db.example.label.attribute = db.label.attribute
  db.example.width.attribute = db.width.characters.attribute
  db.example.pgwide.attribute = db.pgwide.attribute
  db.example.floatstyle.attribute = db.floatstyle.attribute
  db.example.type.attribute =
    
    ## Identifies the type of example
    attribute type { text }?
  db.example.attlist =
    db.example.role.attribute?
    & db.example.type.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.example.label.attribute?
    & db.example.floatstyle.attribute?
    & (db.example.width.attribute | db.example.pgwide.attribute)?
  db.example.info = db._info.title.onlyreq
  db.example =
    
    ## A formal example, with a title
    [
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:example"
          s:assert [
            test = "not(.//db:example)"
            "example must not occur among the children or descendants of example"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:example"
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur among the children or descendants of example"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:example"
          s:assert [
            test = "not(.//db:table)"
            "table must not occur among the children or descendants of example"
          ]
        ]
      ]
    ]
    element example {
      db.example.attlist, db.example.info, db.all.blocks+, db.caption?
    }
}
db.verbatim.inlines = db.all.inlines | db.lineannotation
db.verbatim.contentmodel =
  db._info.title.forbidden, (db.textobject | db.verbatim.inlines*)
div {
  db.literallayout.role.attribute = attribute role { text }
  db.literallayout.class.enumeration =
    
    ## The literal layout should be formatted with a monospaced font
    "monospaced"
    | 
      ## The literal layout should be formatted with the current font
      "normal"
  db.literallayout.class.attribute =
    
    ## Specifies the class of literal layout
    attribute class { db.literallayout.class.enumeration }
  db.literallayout.attlist =
    db.literallayout.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.verbatim.attributes
    & db.literallayout.class.attribute?
  db.literallayout =
    
    ## A block of text in which line breaks and white space are to be reproduced faithfully
    element literallayout {
      db.literallayout.attlist, db.verbatim.contentmodel
    }
}
div {
  db.figure.role.attribute = attribute role { text }
  db.figure.label.attribute = db.label.attribute
  db.figure.pgwide.attribute = db.pgwide.attribute
  db.figure.floatstyle.attribute = db.floatstyle.attribute
  db.figure.type.attribute =
    
    ## Identifies the type of figure
    attribute type { text }?
  db.figure.attlist =
    db.figure.role.attribute?
    & db.figure.type.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.figure.label.attribute?
    & db.figure.pgwide.attribute?
    & db.figure.floatstyle.attribute?
  db.figure.info = db._info.title.onlyreq
  db.figure =
    
    ## A formal figure, generally an illustration, with a title
    [
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:figure"
          s:assert [
            test = "not(.//db:example)"
            "example must not occur among the children or descendants of figure"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:figure"
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur among the children or descendants of figure"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:figure"
          s:assert [
            test = "not(.//db:table)"
            "table must not occur among the children or descendants of figure"
          ]
        ]
      ]
    ]
    element figure {
      db.figure.attlist, db.figure.info, db.all.blocks+, db.caption?
    }
}
db.mediaobject.content =
  db.videoobject | db.audioobject | db.imageobject | db.textobject
div {
  db.mediaobject.role.attribute = attribute role { text }
  db.mediaobject.attlist =
    db.mediaobject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.mediaobject.info = db._info.title.forbidden
  db.mediaobject =
    
    ## A displayed media object (video, audio, image, etc.)
    element mediaobject {
      db.mediaobject.attlist,
      db.mediaobject.info,
      db.alt?,
      db.mediaobject.content+,
      db.caption?
    }
}
div {
  db.inlinemediaobject.role.attribute = attribute role { text }
  db.inlinemediaobject.attlist =
    db.inlinemediaobject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.inlinemediaobject.info = db._info.title.forbidden
  db.inlinemediaobject =
    
    ## An inline media object (video, audio, image, and so on)
    element inlinemediaobject {
      db.inlinemediaobject.attlist,
      db.inlinemediaobject.info,
      db.alt?,
      db.mediaobject.content+
    }
}
div {
  db.videoobject.role.attribute = attribute role { text }
  db.videoobject.attlist =
    db.videoobject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.videoobject.info = db._info.title.forbidden
  db.videoobject =
    
    ## A wrapper for video data and its associated meta-information
    element videoobject {
      db.videoobject.attlist, db.videoobject.info, db.videodata+
    }
}
div {
  db.audioobject.role.attribute = attribute role { text }
  db.audioobject.attlist =
    db.audioobject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.audioobject.info = db._info.title.forbidden
  db.audioobject =
    
    ## A wrapper for audio data and its associated meta-information
    element audioobject {
      db.audioobject.attlist, db.audioobject.info, db.audiodata+
    }
}
db.imageobject.content = db.imagedata+
div {
  db.imageobject.role.attribute = attribute role { text }
  db.imageobject.attlist =
    db.imageobject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.imageobject.info = db._info.title.forbidden
  db.imageobject =
    
    ## A wrapper for image data and its associated meta-information
    element imageobject {
      db.imageobject.attlist,
      db.imageobject.info,
      db.imageobject.content
    }
}
div {
  db.textobject.role.attribute = attribute role { text }
  db.textobject.attlist =
    db.textobject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.textobject.info = db._info.title.forbidden
  db.textobject =
    
    ## A wrapper for a text description of an object and its associated meta-information
    element textobject {
      db.textobject.attlist,
      db.textobject.info,
      (db.phrase | db.textdata | db.all.blocks+)
    }
}
div {
  db.videodata.role.attribute = attribute role { text }
  db.videodata.align.enumeration = db.halign.enumeration
  db.videodata.align.attribute =
    
    ## Specifies the (horizontal) alignment of the video data
    attribute align { db.videodata.align.enumeration }
  db.videodata.autoplay.attribute = db.autoplay.attribute
  db.videodata.classid.attribute = db.classid.attribute
  db.videodata.valign.enumeration = db.valign.enumeration
  db.videodata.valign.attribute =
    
    ## Specifies the vertical alignment of the video data
    attribute valign { db.videodata.valign.enumeration }
  db.videodata.width.attribute = db.width.attribute
  db.videodata.depth.attribute = db.depth.attribute
  db.videodata.contentwidth.attribute = db.contentwidth.attribute
  db.videodata.contentdepth.attribute = db.contentdepth.attribute
  db.videodata.scalefit.enumeration = db.scalefit.enumeration
  db.videodata.scalefit.attribute =
    
    ## Determines if anamorphic scaling is forbidden
    attribute scalefit { db.videodata.scalefit.enumeration }
  db.videodata.scale.attribute = db.scale.attribute
  db.videodata.attlist =
    db.videodata.role.attribute?
    & db.common.attributes
    & db.common.data.attributes
    & db.videodata.align.attribute?
    & db.videodata.valign.attribute?
    & db.videodata.width.attribute?
    & db.videodata.contentwidth.attribute?
    & db.videodata.scalefit.attribute?
    & db.videodata.scale.attribute?
    & db.videodata.depth.attribute?
    & db.videodata.contentdepth.attribute?
    & db.videodata.autoplay.attribute?
    & db.videodata.classid.attribute?
  db.videodata.info = db._info.title.forbidden
  db.videodata =
    
    ## Pointer to external video data
    element videodata {
      db.videodata.attlist, db.videodata.info, db.multimediaparam*
    }
}
div {
  db.audiodata.role.attribute = attribute role { text }
  db.audiodata.align.enumeration = db.halign.enumeration
  db.audiodata.align.attribute =
    
    ## Specifies the (horizontal) alignment of the video data
    attribute align { db.audiodata.align.enumeration }
  db.audiodata.autoplay.attribute = db.autoplay.attribute
  db.audiodata.classid.attribute = db.classid.attribute
  db.audiodata.contentwidth.attribute = db.contentwidth.attribute
  db.audiodata.contentdepth.attribute = db.contentdepth.attribute
  db.audiodata.depth.attribute = db.depth.attribute
  db.audiodata.scale.attribute = db.scale.attribute
  db.audiodata.scalefit.enumeration = db.scalefit.enumeration
  db.audiodata.scalefit.attribute =
    
    ## Determines if anamorphic scaling is forbidden
    attribute scalefit { db.audiodata.scalefit.enumeration }
  db.audiodata.valign.enumeration = db.valign.enumeration
  db.audiodata.valign.attribute =
    
    ## Specifies the vertical alignment of the video data
    attribute valign { db.audiodata.valign.enumeration }
  db.audiodata.width.attribute = db.width.attribute
  db.audiodata.attlist =
    db.audiodata.role.attribute?
    & db.common.attributes
    & db.common.data.attributes
    & db.audiodata.align.attribute?
    & db.audiodata.autoplay.attribute?
    & db.audiodata.classid.attribute?
    & db.audiodata.contentdepth.attribute?
    & db.audiodata.contentwidth.attribute?
    & db.audiodata.depth.attribute?
    & db.audiodata.scale.attribute?
    & db.audiodata.scalefit.attribute?
    & db.audiodata.valign.attribute?
    & db.audiodata.width.attribute?
  db.audiodata.info = db._info.title.forbidden
  db.audiodata =
    
    ## Pointer to external audio data
    element audiodata {
      db.audiodata.attlist, db.audiodata.info, db.multimediaparam*
    }
}
div {
  db.imagedata.role.attribute = attribute role { text }
  db.imagedata.align.enumeration = db.halign.enumeration
  db.imagedata.align.attribute =
    
    ## Specifies the (horizontal) alignment of the image data
    attribute align { db.imagedata.align.enumeration }
  db.imagedata.valign.enumeration = db.valign.enumeration
  db.imagedata.valign.attribute =
    
    ## Specifies the vertical alignment of the image data
    attribute valign { db.imagedata.valign.enumeration }
  db.imagedata.width.attribute = db.width.attribute
  db.imagedata.depth.attribute = db.depth.attribute
  db.imagedata.contentwidth.attribute = db.contentwidth.attribute
  db.imagedata.contentdepth.attribute = db.contentdepth.attribute
  db.imagedata.scalefit.enumeration = db.scalefit.enumeration
  db.imagedata.scalefit.attribute =
    
    ## Determines if anamorphic scaling is forbidden
    attribute scalefit { db.imagedata.scalefit.enumeration }
  db.imagedata.scale.attribute = db.scale.attribute
  db.imagedata.attlist =
    db.imagedata.role.attribute?
    & db.common.attributes
    & db.common.data.attributes
    & db.imagedata.align.attribute?
    & db.imagedata.valign.attribute?
    & db.imagedata.width.attribute?
    & db.imagedata.contentwidth.attribute?
    & db.imagedata.scalefit.attribute?
    & db.imagedata.scale.attribute?
    & db.imagedata.depth.attribute?
    & db.imagedata.contentdepth.attribute?
  db.imagedata.info = db._info.title.forbidden
  db.imagedata =
    
    ## Pointer to external image data
    element imagedata {
      db.imagedata.attlist, db.imagedata.info, db.multimediaparam*
    }
}
div {
  db.textdata.role.attribute = attribute role { text }
  db.textdata.encoding.attribute =
    
    ## Identifies the encoding of the text in the external file
    attribute encoding { text }
  db.textdata.attlist =
    db.textdata.role.attribute?
    & db.common.attributes
    & db.common.data.attributes
    & db.textdata.encoding.attribute?
  db.textdata.info = db._info.title.forbidden
  db.textdata =
    
    ## Pointer to external text data
    element textdata { db.textdata.attlist, db.textdata.info }
}
div {
  db.multimediaparam.role.attribute = attribute role { text }
  db.multimediaparam.name.attribute =
    
    ## Specifies the name of the parameter
    attribute name { text }
  db.multimediaparam.value.attribute =
    
    ## Specifies the value of the parameter
    attribute value { text }
  db.multimediaparam.valuetype.attribute =
    
    ## Specifies the type of the value of the parameter
    attribute valuetype { text }
  db.multimediaparam.attlist =
    db.multimediaparam.role.attribute?
    & db.common.attributes
    & db.multimediaparam.name.attribute
    & db.multimediaparam.value.attribute
    & db.multimediaparam.valuetype.attribute?
  db.multimediaparam =
    
    ## Application specific parameters for a media player
    element multimediaparam { db.multimediaparam.attlist, empty }
}
div {
  db.caption.role.attribute = attribute role { text }
  db.caption.attlist =
    db.caption.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.caption.info = db._info.title.forbidden
  db.caption =
    
    ## A caption
    [
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:caption"
          s:assert [
            test = "not(.//db:note)"
            "note must not occur among the children or descendants of caption"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:caption"
          s:assert [
            test = "not(.//db:example)"
            "example must not occur among the children or descendants of caption"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:caption"
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur among the children or descendants of caption"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:caption"
          s:assert [
            test = "not(.//db:table)"
            "table must not occur among the children or descendants of caption"
          ]
        ]
      ]
      s:pattern [
        s:title [ "Element exclusion" ]
        s:rule [
          context = "db:caption"
          s:assert [
            test = "not(.//db:sidebar)"
            "sidebar must not occur among the children or descendants of caption"
          ]
        ]
      ]
    ]
    element caption {
      db.caption.attlist, db.caption.info, db.all.blocks+
    }
}
div {
  db.affiliation.role.attribute = attribute role { text }
  db.affiliation.attlist =
    db.affiliation.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
}
div {
  db.orgname.class.enumeration =
    
    ## A consortium
    "consortium"
    | 
      ## A corporation
      "corporation"
    | 
      ## An informal organization
      "informal"
    | 
      ## A non-profit organization
      "nonprofit"
  db.orgname.class-enum.attribute =
    
    ## Specifies the nature of the organization
    attribute class { db.orgname.class.enumeration }
  db.orgname.class-other.attributes =
    
    ## Specifies the nature of the organization
    attribute class {
      
      ## Indicates a non-standard organization class
      "other"
    },
    
    ## Identifies the non-standard nature of the organization
    attribute otherclass { text }
  db.orgname.class.attribute =
    db.orgname.class-enum.attribute | db.orgname.class-other.attributes
  db.orgname.role.attribute = attribute role { text }
  db.orgname.attlist =
    db.orgname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.orgname.class.attribute?
  db.orgname =
    
    ## The name of an organization
    element orgname { db.orgname.attlist, db._text }
}
div {
  db.personname.role.attribute = attribute role { text }
  db.personname.attlist =
    db.personname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.personname =
    
    ## The personal name of an individual
    element personname {
      db.personname.attlist,
      (db._text
       | (db.honorific
          | db.firstname
          | db.surname
          | db.lineage
          | db.othername)+
       | (db.honorific
          | db.givenname
          | db.surname
          | db.lineage
          | db.othername)+)
    }
}
db.credit.contentmodel =
  db.person.author.contentmodel | db.org.author.contentmodel
div {
  db.author.role.attribute = attribute role { text }
  db.author.attlist =
    db.author.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.author =
    
    ## The name of an individual author
    element author { db.author.attlist, db.credit.contentmodel }
}
div {
  db.authorgroup.role.attribute = attribute role { text }
  db.authorgroup.attlist =
    db.authorgroup.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.authorgroup =
    
    ## Wrapper for author information when a document has multiple authors or collaborators
    element authorgroup {
      db.authorgroup.attlist, (db.author | db.editor | db.othercredit)+
    }
}
div {
  db.authorinitials.role.attribute = attribute role { text }
  db.authorinitials.attlist =
    db.authorinitials.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.authorinitials =
    
    ## The initials or other short identifier for an author
    element authorinitials { db.authorinitials.attlist, db._text }
}
div {
  db.copyright.role.attribute = attribute role { text }
  db.copyright.attlist =
    db.copyright.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.copyright =
    
    ## Copyright information about a document
    element copyright { db.copyright.attlist, db.year+, db.holder* }
}
div {
  db.year.role.attribute = attribute role { text }
  db.year.attlist =
    db.year.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.year =
    
    ## The year of publication of a document
    element year { db.year.attlist, db._text }
}
div {
  db.holder.role.attribute = attribute role { text }
  db.holder.attlist =
    db.holder.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.holder =
    
    ## The name of the individual or organization that holds a copyright
    element holder { db.holder.attlist, db._text }
}
db.date.contentmodel =
  xsd:date | xsd:dateTime | xsd:gYearMonth | xsd:gYear | text
div {
  db.date.role.attribute = attribute role { text }
  db.date.attlist =
    db.date.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.date =
    
    ## The date of publication or revision of a document
    element date { db.date.attlist, db.date.contentmodel }
}
div {
  db.edition.role.attribute = attribute role { text }
  db.edition.attlist =
    db.edition.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.edition =
    
    ## The name or number of an edition of a document
    element edition { db.edition.attlist, db._text }
}
div {
  db.editor.role.attribute = attribute role { text }
  db.editor.attlist =
    db.editor.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.editor =
    
    ## The name of the editor of a document
    element editor { db.editor.attlist, db.credit.contentmodel }
}
div {
  db.legalnotice.role.attribute = attribute role { text }
  db.legalnotice.attlist =
    db.legalnotice.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.legalnotice.info = db._info.title.only
  db.legalnotice =
    
    ## A statement of legal obligations or requirements
    element legalnotice {
      db.legalnotice.attlist, db.legalnotice.info, db.all.blocks+
    }
}
div {
  db.othercredit.class.enumeration =
    
    ## A copy editor
    "copyeditor"
    | 
      ## A graphic designer
      "graphicdesigner"
    | 
      ## A production editor
      "productioneditor"
    | 
      ## A technical editor
      "technicaleditor"
    | 
      ## A translator
      "translator"
    | 
      ## An indexer
      "indexer"
    | 
      ## A proof-reader
      "proofreader"
    | 
      ## A cover designer
      "coverdesigner"
    | 
      ## An interior designer
      "interiordesigner"
    | 
      ## An illustrator
      "illustrator"
    | 
      ## A reviewer
      "reviewer"
    | 
      ## A typesetter
      "typesetter"
    | 
      ## A converter (a persons responsible for conversion, not an application)
      "conversion"
  db.othercredit.class-enum.attribute =
    
    ## Identifies the nature of the contributor
    attribute class { db.othercredit.class.enumeration }?
  db.othercredit.class-other.attribute =
    
    ## Identifies the nature of the non-standard contribution
    attribute otherclass { xsd:NMTOKEN }
  db.othercredit.class-other.attributes =
    
    ## Identifies the nature of the contributor
    attribute class {
      
      ## Identifies a non-standard contribution
      "other"
    }
    & db.othercredit.class-other.attribute
  db.othercredit.class.attribute =
    db.othercredit.class-enum.attribute
    | db.othercredit.class-other.attributes
  db.othercredit.role.attribute = attribute role { text }
  db.othercredit.attlist =
    db.othercredit.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.othercredit.class.attribute
  db.othercredit =
    
    ## A person or entity, other than an author or editor, credited in a document
    element othercredit {
      db.othercredit.attlist, db.credit.contentmodel
    }
}
div {
  db.honorific.role.attribute = attribute role { text }
  db.honorific.attlist =
    db.honorific.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.honorific =
    
    ## The title of a person
    element honorific { db.honorific.attlist, db._text }
}
div {
  db.firstname.role.attribute = attribute role { text }
  db.firstname.attlist =
    db.firstname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.firstname =
    
    ## A given name of a person
    element firstname { db.firstname.attlist, db._text }
}
div {
  db.givenname.role.attribute = attribute role { text }
  db.givenname.attlist =
    db.givenname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.givenname =
    
    ## The given name of a person
    element givenname { db.givenname.attlist, db._text }
}
div {
  db.surname.role.attribute = attribute role { text }
  db.surname.attlist =
    db.surname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.surname =
    
    ## An inherited or family name; in western cultures the last name
    element surname { db.surname.attlist, db._text }
}
div {
  db.lineage.role.attribute = attribute role { text }
  db.lineage.attlist =
    db.lineage.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.lineage =
    
    ## The portion of a person's name indicating a relationship to ancestors
    element lineage { db.lineage.attlist, db._text }
}
div {
  db.othername.role.attribute = attribute role { text }
  db.othername.attlist =
    db.othername.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.othername =
    
    ## A component of a person's name that is not a first name, surname, or lineage
    element othername { db.othername.attlist, db._text }
}
div {
  db.pubdate.role.attribute = attribute role { text }
  db.pubdate.attlist =
    db.pubdate.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.pubdate =
    
    ## The date of publication of a document
    element pubdate { db.pubdate.attlist, db.date.contentmodel }
}
div {
  db.publishername.role.attribute = attribute role { text }
  db.publishername.attlist =
    db.publishername.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.publishername =
    
    ## The name of the publisher of a document
    element publishername { db.publishername.attlist, db._text }
}
div {
  db.releaseinfo.role.attribute = attribute role { text }
  db.releaseinfo.attlist =
    db.releaseinfo.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.releaseinfo =
    
    ## Information about a particular release of a document
    element releaseinfo { db.releaseinfo.attlist, db._text }
}
div {
  db.revhistory.role.attribute = attribute role { text }
  db.revhistory.attlist =
    db.revhistory.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.revhistory.info = db._info.title.only
  db.revhistory =
    
    ## A history of the revisions to a document
    element revhistory {
      db.revhistory.attlist, db.revhistory.info, db.revision+
    }
}
div {
  db.revision.role.attribute = attribute role { text }
  db.revision.attlist =
    db.revision.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.revision =
    
    ## An entry describing a single revision in the history of the revisions to a document
    element revision {
      db.revision.attlist,
      db.revnumber?,
      db.date,
      (db.authorinitials | db.author)*,
      (db.revremark | db.revdescription)?
    }
}
div {
  db.revnumber.role.attribute = attribute role { text }
  db.revnumber.attlist =
    db.revnumber.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.revnumber =
    
    ## A document revision number
    element revnumber { db.revnumber.attlist, db._text }
}
div {
  db.revremark.role.attribute = attribute role { text }
  db.revremark.attlist =
    db.revremark.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.revremark =
    
    ## A description of a revision to a document
    element revremark { db.revremark.attlist, db._text }
}
div {
  db.revdescription.role.attribute = attribute role { text }
  db.revdescription.attlist =
    db.revdescription.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.revdescription =
    
    ## A extended description of a revision to a document
    element revdescription { db.revdescription.attlist, db.all.blocks* }
}
div {
  db.volumenum.role.attribute = attribute role { text }
  db.volumenum.attlist =
    db.volumenum.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.volumenum =
    
    ## The volume number of a document in a set (as of books in a set or articles in a journal)
    element volumenum { db.volumenum.attlist, db._text }
}
div {
  db.issuenum.role.attribute = attribute role { text }
  db.issuenum.attlist =
    db.issuenum.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.issuenum =
    
    ## The number of an issue of a journal
    element issuenum { db.issuenum.attlist, db._text }
}
div {
  db.email.role.attribute = attribute role { text }
  db.email.attlist =
    db.email.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.email =
    
    ## An email address
    element email { db.email.attlist, db._text }
}
div {
  db.lineannotation.role.attribute = attribute role { text }
  db.lineannotation.attlist =
    db.lineannotation.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.lineannotation =
    
    ## A comment on a line in a verbatim listing
    element lineannotation { db.lineannotation.attlist, db._text }
}
db.replaceable.inlines = db._text
div {
  db.replaceable.class.enumeration =
    
    ## A command
    "command"
    | 
      ## A function
      "function"
    | 
      ## An option
      "option"
    | 
      ## A parameter
      "parameter"
  db.replaceable.class.attribute =
    
    ## Identifies the nature of the replaceable text
    attribute class { db.replaceable.class.enumeration }
  db.replaceable.role.attribute = attribute role { text }
  db.replaceable.attlist =
    db.replaceable.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.replaceable.class.attribute?
  db.replaceable =
    
    ## Content that may or must be replaced by the user
    element replaceable {
      db.replaceable.attlist, db.replaceable.inlines*
    }
}
div {
  db.abbrev.role.attribute = attribute role { text }
  db.abbrev.attlist =
    db.abbrev.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
}
div {
  db.acronym.role.attribute = attribute role { text }
  db.acronym.attlist =
    db.acronym.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
}
div {
  db.citetitle.pubwork.enumeration = db.pubwork.enumeration
  db.citetitle.pubwork-enum.attribute =
    
    ## Identifies the nature of the publication being cited
    attribute pubwork { db.citetitle.pubwork.enumeration }
  db.citetitle.pubwork-other.attribute =
    
    ## Identifies the nature of some other kind of publication being cited
    attribute otherpubwork { xsd:NMTOKEN }
  db.citetitle.pubwork-other.attributes =
    
    ## Identifies that this is some other kind of publication being cited
    attribute pubwork {
      
      ## Indicates that the published work is some 'other' kind.
      "other"
    }
    & db.citetitle.pubwork-other.attribute
  db.citetitle.pubwork.attribute =
    db.citetitle.pubwork-enum.attribute
    | db.citetitle.pubwork-other.attributes
  db.citetitle.role.attribute = attribute role { text }
  db.citetitle.attlist =
    db.citetitle.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.citetitle.pubwork.attribute?
  db.citetitle =
    
    ## The title of a cited work
    element citetitle { db.citetitle.attlist, db.all.inlines* }
}
div {
  db.emphasis.role.attribute = attribute role { text }
  db.emphasis.attlist =
    db.emphasis.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.emphasis =
    
    ## Emphasized text
    element emphasis { db.emphasis.attlist, db.all.inlines* }
}
div {
  db.phrase.role.attribute = attribute role { text }
  db.phrase.attlist =
    db.phrase.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.phrase =
    
    ## A span of text
    element phrase { db.phrase.attlist, db.all.inlines* }
}
div {
  db._phrase =
    
    ## A limited span of text
    element phrase { db.phrase.attlist, db._text }
}
div {
  db.quote.role.attribute = attribute role { text }
  db.quote.attlist =
    db.quote.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.quote =
    
    ## An inline quotation
    element quote { db.quote.attlist, db.all.inlines* }
}
div {
  db.subscript.role.attribute = attribute role { text }
  db.subscript.attlist =
    db.subscript.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.subscript =
    
    ## A subscript (as in H₂O, the molecular formula for water)
    element subscript { db.subscript.attlist, db._text }
}
div {
  db.superscript.role.attribute = attribute role { text }
  db.superscript.attlist =
    db.superscript.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.superscript =
    
    ## A superscript (as in x², the mathematical notation for x multiplied by itself)
    element superscript { db.superscript.attlist, db._text }
}
div {
  db.trademark.class.enumeration =
    
    ## A copyright
    "copyright"
    | 
      ## A registered copyright
      "registered"
    | 
      ## A service
      "service"
    | 
      ## A trademark
      "trade"
  db.trademark.class.attribute =
    
    ## Identifies the class of trade mark
    attribute class { db.trademark.class.enumeration }
  db.trademark.role.attribute = attribute role { text }
  db.trademark.attlist =
    db.trademark.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.trademark.class.attribute?
  db.trademark =
    
    ## A trademark
    element trademark { db.trademark.attlist, db._text }
}
div {
  db.footnoteref.role.attribute = attribute role { text }
  db.footnoteref.label.attribute = db.label.attribute
  db.footnoteref.attlist =
    db.footnoteref.role.attribute?
    & db.common.attributes
    & db.linkend.attribute
    & db.footnoteref.label.attribute?
  db.footnoteref =
    
    ## A cross reference to a footnote (a footnote mark)
    [
      s:pattern [
        s:title [ "Footnote reference type constraint" ]
        s:rule [
          context = "db:footnoteref"
          s:assert [
            test =
              "local-name(//*[@xml:id=current()/@linkend]) = 'footnote' and namespace-uri(//*[@xml:id=current()/@linkend]) = 'http://docbook.org/ns/docbook'"
            "@linkend on footnoteref must point to a footnote."
          ]
        ]
      ]
    ]
    element footnoteref { db.footnoteref.attlist, empty }
}
div {
  db.xref.role.attribute = attribute role { text }
  db.xref.xrefstyle.attribute = db.xrefstyle.attribute
  db.xref.endterm.attribute = db.endterm.attribute
  db.xref.attlist =
    db.xref.role.attribute?
    & db.common.attributes
    & db.common.req.linking.attributes
    & db.xref.xrefstyle.attribute?
    & db.xref.endterm.attribute?
  db.xref =
    
    ## A cross reference to another part of the document
    element xref { db.xref.attlist, empty }
}
div {
  db.link.role.attribute = attribute role { text }
  db.link.xrefstyle.attribute = db.xrefstyle.attribute
  db.link.endterm.attribute = db.endterm.attribute
  db.link.attlist =
    db.link.role.attribute?
    & db.common.attributes
    & db.common.req.linking.attributes
    & db.link.xrefstyle.attribute?
    & db.link.endterm.attribute?
  db.link =
    
    ## A hypertext link
    element link { db.link.attlist, db.all.inlines* }
}
div {
  db.alt.role.attribute = attribute role { text }
  db.alt.attlist = db.alt.role.attribute? & db.common.attributes
  db.alt =
    
    ## A text-only annotation, often used for accessibility
    element alt { db.alt.attlist, (text | db.inlinemediaobject)* }
}
db.common.attributes =
  attribute xml:id { xsd:ID }?,
  attribute version { text }?,
  attribute xml:lang { text }?,
  attribute xml:base { text }?,
  attribute revisionflag { "changed" | "added" | "deleted" | "off" }?
db.info.elements =
  (db.abstract
   | db.author
   | db.authorgroup
   | db.copyright
   | db.date
   | db.edition
   | db.editor
   | db.issuenum
   | db.keywordset
   | db.legalnotice
   | db.othercredit
   | db.pubdate
   | db.publishername
   | db.releaseinfo
   | db.revhistory
   | db.subjectset
   | db.volumenum)
  | (db.bibliomisc | db.bibliomset)
  | sl._any.html
db.bibliographic.elements =
  db.info.elements
  | db.abbrev
  | db.affiliation
  | db.citetitle
  | db.orgname
  | db.personblurb
  | db.personname
  | db.subtitle
  | db.title
  | db.titleabbrev
db.list.blocks = (db.itemizedlist | db.orderedlist | db.variablelist)
db.verbatim.blocks = db.literallayout | (db.programlisting)
db.para.blocks = db.para
db.publishing.blocks = db.blockquote | db.sidebar | db.epigraph
db.graphic.blocks = db.mediaobject
db.informal.blocks = db.informaltable
db.formal.blocks = db.example | db.figure | db.table
db.technical.blocks = empty
db.synopsis.blocks = empty
db.nopara.blocks =
  (db.list.blocks
   | db.admonition.blocks
   | db.formal.blocks
   | db.informal.blocks
   | db.publishing.blocks
   | db.graphic.blocks
   | db.technical.blocks
   | db.verbatim.blocks
   | db.synopsis.blocks
   | db.revhistory)
  | db.synopsis.blocks
  | db.admonition.blocks
db.ubiq.inlines = db.inlinemediaobject | db.superscript | db.subscript
db.publishing.inlines =
  db.abbrev
  | db.acronym
  | db.emphasis
  | db.footnote
  | db.footnoteref
  | db.phrase
  | db.quote
db.product.inlines = db.trademark
db.bibliography.inlines =
  db.citetitle | db.author | db.personname | db.orgname | db.editor
db.technical.inlines = db.replaceable | (db.systemitem | db.option)
db.link.inlines = (db.xref | db.link)
db.person.author.contentmodel =
  db.personname, (db.personblurb | db.affiliation | db.email)*
db.org.author.contentmodel = db.orgname, (db.affiliation | db.email)*
div {
  db.abbrev =
    
    ## An abbreviation, especially one followed by a period
    element abbrev { db.abbrev.attlist, (db._text | db.trademark)* }
}
div {
  db.acronym =
    
    ## An often pronounceable word made from the initial (or selected) letters of a name or phrase
    element acronym { db.acronym.attlist, (db._text | db.trademark)* }
}
div {
  db.attribution =
    
    ## The source of a block quote or epigraph
    element attribution {
      db.attribution.attlist, (db._text | db.personname | db.citetitle)*
    }
}
div {
  db.affiliation =
    
    ## The institutional affiliation of an individual
    element affiliation { db.affiliation.attlist, db.orgname? }
}
div {
  db.para =
    
    ## A paragraph
    element para { db.para.attlist, db.para.info, db.all.inlines* }
}
start = sl.slides
div {
  sl.slides.role.attribute = attribute role { text }
  sl.slides.attlist = sl.slides.role.attribute? & db.common.attributes
  sl.slides.info = db._info.title.req
  sl.slides =
    
    ## A set of slides (or foils)
    [
      s:pattern [
        s:title [ "Root must have version" ]
        s:rule [
          context = "/db:slides"
          s:assert [
            test = "@version"
            "If this element is the root element, it must have a version attribute."
          ]
        ]
      ]
    ]
    element slides {
      sl.slides.attlist,
      sl.slides.info,
      (db.all.blocks | sl.speakernotes)*,
      (sl.foil | sl.foilgroup)+
    }
}
div {
  sl.foilgroup.role.attribute = attribute role { text }
  sl.foilgroup.attlist =
    sl.foilgroup.role.attribute?
    & db.status.attribute?
    & db.common.attributes
  sl.foilgroup.info = db._info.title.req
  sl.foilgroup =
    
    ## A group of slides (or foils)
    element foilgroup {
      sl.foilgroup.attlist,
      sl.foilgroup.info,
      (db.all.blocks | db.navigation.components | sl.speakernotes)*,
      sl.foil+
    }
}
div {
  sl.foil.role.attribute = attribute role { text }
  sl.foil.attlist =
    sl.foil.role.attribute?
    & db.status.attribute?
    & db.common.attributes
  sl.foil.info = db._info.title.req
  sl.foil =
    
    ## A slide (or foil)
    element foil {
      sl.foil.attlist,
      sl.foil.info,
      (db.all.blocks | db.navigation.components | sl.speakernotes)+
    }
}
div {
  sl.speakernotes.role.attribute = attribute role { text }
  sl.speakernotes.attlist =
    sl.speakernotes.role.attribute?
    & db.status.attribute?
    & db.common.attributes
  sl.speakernotes =
    
    ## Speaker notes
    element speakernotes { sl.speakernotes.attlist, db.all.blocks+ }
}
div {
  sl._any.attribute =
    
    ## Any attribute, including any attribute in any namespace.
    attribute * { text }
  sl._any.html =
    
    ## Any element from the HTML namespace
    element html:* { (sl._any.attribute | text | sl._any.html)* }
}
