<article xmlns="http://docbook.org/ns/docbook" version="5.0">
<title>Article wrapper</title>

<para>Callouts using <tag>co</tag>:</para>

<screen>
(let <co xml:id="dl1"/>loopvar <co xml:id="dl2"/>((count 1))
  <co xml:id="dl3"/>(if (> count 10)
    <co xml:id="dl4"/>#t
    (<co xml:id="dl5"/>loopvar <co xml:id="dl6"/>(+ count 1))))

(let <co xml:id="dl7"/>loopvar <co xml:id="dl8"/>((count 1))
  <co xml:id="dl9"/>(if (> count 10)
    <co xml:id="dl10"/>#t
    (<co xml:id="dl11"/>loopvar <co xml:id="dl12"/>(+ count 1))))

(let <co xml:id="dl13"/>loopvar <co xml:id="dl14"/>((count 1))
  <co xml:id="dl15"/>(if (> count 10)
    <co xml:id="dl16"/>#t
    (<co xml:id="dl17"/>loopvar <co xml:id="dl18"/>(+ count 1))))

(let <co xml:id="dl19"/>loopvar <co xml:id="dl20"/>((count 1))
  <co xml:id="dl21"/>(if (> count 10)
    <co xml:id="dl22"/>#t
    (<co xml:id="dl23"/>loopvar <co xml:id="dl24"/>(+ count 1))))</screen>

<calloutlist>
<callout arearefs="dl1">
<para>This variable controls the loop. It is declared without an
initial value, immediately after the <literal>let</literal>
operand.</para>
</callout>
<callout arearefs="dl2">
<para>Any number of additional local variables can be defined after
the loop variable, just as they can in any other
<literal>let</literal> expression.</para>
</callout>
<callout arearefs="dl3">
<para>If you ever want the loop to end, you have to put some sort of a
test in it.</para>
</callout>
<callout arearefs="dl4">
<para>This is the value that will be returned.</para>
</callout>
<callout arearefs="dl5">
<para>Note that you iterate the loop by using the loop variable as if
it was a function name.</para>
</callout>
<callout arearefs="dl6">
<para>The arguments to this function are the values that
you want the local variables declared in <xref linkend="dl2"/> to have
in the next iteration.</para>
</callout>
<callout arearefs="dl7">
<para>This variable controls the loop. It is declared without an
initial value, immediately after the <literal>let</literal>
operand.</para>
</callout>
<callout arearefs="dl8">
<para>Any number of additional local variables can be defined after
the loop variable, just as they can in any other
<literal>let</literal> expression.</para>
</callout>
<callout arearefs="dl9">
<para>If you ever want the loop to end, you have to put some sort of a
test in it.</para>
</callout>
<callout arearefs="dl10">
<para>This is the value that will be returned.</para>
</callout>
<callout arearefs="dl11">
<para>Note that you iterate the loop by using the loop variable as if
it was a function name.</para>
</callout>
<callout arearefs="dl12">
<para>The arguments to this function are the values that
you want the local variables declared in <xref linkend="dl2"/> to have
in the next iteration.</para>
</callout>
<callout arearefs="dl13">
<para>This variable controls the loop. It is declared without an
initial value, immediately after the <literal>let</literal>
operand.</para>
</callout>
<callout arearefs="dl14">
<para>Any number of additional local variables can be defined after
the loop variable, just as they can in any other
<literal>let</literal> expression.</para>
</callout>
<callout arearefs="dl15">
<para>If you ever want the loop to end, you have to put some sort of a
test in it.</para>
</callout>
<callout arearefs="dl16">
<para>This is the value that will be returned.</para>
</callout>
<callout arearefs="dl17">
<para>Note that you iterate the loop by using the loop variable as if
it was a function name.</para>
</callout>
<callout arearefs="dl18">
<para>The arguments to this function are the values that
you want the local variables declared in <xref linkend="dl2"/> to have
in the next iteration.</para>
</callout>
<callout arearefs="dl19">
<para>This variable controls the loop. It is declared without an
initial value, immediately after the <literal>let</literal>
operand.</para>
</callout>
<callout arearefs="dl20">
<para>Any number of additional local variables can be defined after
the loop variable, just as they can in any other
<literal>let</literal> expression.</para>
</callout>
<callout arearefs="dl21">
<para>If you ever want the loop to end, you have to put some sort of a
test in it.</para>
</callout>
<callout arearefs="dl22">
<para>This is the value that will be returned.</para>
</callout>
<callout arearefs="dl23">
<para>Note that you iterate the loop by using the loop variable as if
it was a function name.</para>
</callout>
<callout arearefs="dl24">
<para>The arguments to this function are the values that
you want the local variables declared in <xref linkend="dl2"/> to have
in the next iteration.</para>
</callout>
</calloutlist>

</article>
