<html xmlns:deltaxml="http://www.deltaxml.com/ns/well-formed-delta-v1" xmlns="http://www.w3.org/1999/xhtml" xmlns:dxx="http://www.deltaxml.com/ns/xml-namespaced-attribute" xmlns:dxa="http://www.deltaxml.com/ns/non-namespaced-attribute" deltaxml:deltaV2="A!=B" deltaxml:version="2.0" deltaxml:content-type="full-context">
   <head deltaxml:deltaV2="A=B">
      <link href="../../resources/css/db-prism.css" rel="stylesheet" type="text/css"/>
      <link rel="stylesheet" type="text/css" href="../../resources/css/default.css"/>
      <link href="../../resources/css/prism.css" rel="stylesheet" type="text/css"/>
      <meta charset="utf-8"/>
      <meta name="generator" content="DocBook XSL 2.0 Stylesheets Vxxx"/>
      <script type="text/javascript" src="../../resources/js/dbmodnizr.js"/>
      <title>Article wrapper</title>
   </head>
   <body deltaxml:deltaV2="A!=B">
      <article deltaxml:deltaV2="A!=B" id="R.1" class="article">
         <header deltaxml:deltaV2="A=B" class="article-titlepage">
            <h2>Article wrapper</h2>
         </header>
         <p deltaxml:deltaV2="A">Callouts using <code class="tag-element">co</code>:</p><deltaxml:textGroup deltaxml:deltaV2="A"><deltaxml:text deltaxml:deltaV2="A">
         </deltaxml:text></deltaxml:textGroup><pre deltaxml:deltaV2="A" class="screen language-none line-numbers">
            <code>
(let <a name="dl1" id="dl1"/>
               <span data-number="1" class="callout-bug callout-bug-unicode">❶</span>loopvar <a name="dl2" id="dl2"/>
               <span data-number="2" class="callout-bug callout-bug-unicode">❷</span>((count 1))
  <a name="dl3" id="dl3"/>
               <span data-number="3" class="callout-bug callout-bug-unicode">❸</span>(if (&gt; count 10)
    <a name="dl4" id="dl4"/>
               <span data-number="4" class="callout-bug callout-bug-unicode">❹</span>#t
    (<a name="dl5" id="dl5"/>
               <span data-number="5" class="callout-bug callout-bug-unicode">❺</span>loopvar <a name="dl6" id="dl6"/>
               <span data-number="6" class="callout-bug callout-bug-unicode">❻</span>(+ count 1))))

(let <a name="dl7" id="dl7"/>
               <span data-number="7" class="callout-bug callout-bug-unicode">❼</span>loopvar <a name="dl8" id="dl8"/>
               <span data-number="8" class="callout-bug callout-bug-unicode">❽</span>((count 1))
  <a name="dl9" id="dl9"/>
               <span data-number="9" class="callout-bug callout-bug-unicode">❾</span>(if (&gt; count 10)
    <a name="dl10" id="dl10"/>
               <span data-number="10" class="callout-bug callout-bug-unicode">❿</span>#t
    (<a name="dl11" id="dl11"/>
               <span data-number="11" class="callout-bug callout-bug-text">11</span>loopvar <a name="dl12" id="dl12"/>
               <span data-number="12" class="callout-bug callout-bug-text">12</span>(+ count 1))))

(let <a name="dl13" id="dl13"/>
               <span data-number="13" class="callout-bug callout-bug-text">13</span>loopvar <a name="dl14" id="dl14"/>
               <span data-number="14" class="callout-bug callout-bug-text">14</span>((count 1))
  <a name="dl15" id="dl15"/>
               <span data-number="15" class="callout-bug callout-bug-text">15</span>(if (&gt; count 10)
    <a name="dl16" id="dl16"/>
               <span data-number="16" class="callout-bug callout-bug-text">16</span>#t
    (<a name="dl17" id="dl17"/>
               <span data-number="17" class="callout-bug callout-bug-text">17</span>loopvar <a name="dl18" id="dl18"/>
               <span data-number="18" class="callout-bug callout-bug-text">18</span>(+ count 1))))

(let <a name="dl19" id="dl19"/>
               <span data-number="19" class="callout-bug callout-bug-text">19</span>loopvar <a name="dl20" id="dl20"/>
               <span data-number="20" class="callout-bug callout-bug-text">20</span>((count 1))
  <a name="dl21" id="dl21"/>
               <span data-number="21" class="callout-bug callout-bug-text">21</span>(if (&gt; count 10)
    <a name="dl22" id="dl22"/>
               <span data-number="22" class="callout-bug callout-bug-text">22</span>#t
    (<a name="dl23" id="dl23"/>
               <span data-number="23" class="callout-bug callout-bug-text">23</span>loopvar <a name="dl24" id="dl24"/>
               <span data-number="24" class="callout-bug callout-bug-text">24</span>(+ count 1))))</code>
         </pre><deltaxml:textGroup deltaxml:deltaV2="A"><deltaxml:text deltaxml:deltaV2="A">
         </deltaxml:text></deltaxml:textGroup><div deltaxml:deltaV2="A!=B"><deltaxml:attributes deltaxml:deltaV2="A!=B"><dxa:class deltaxml:deltaV2="A!=B"><deltaxml:attributeValue deltaxml:deltaV2="A">calloutlist</deltaxml:attributeValue><deltaxml:attributeValue deltaxml:deltaV2="B">content</deltaxml:attributeValue></dxa:class></deltaxml:attributes>
            <dl deltaxml:deltaV2="A">
               <dt class="callout">
                  <a href="#dl1" class="callout-link">
                     <span data-number="1" class="callout-bug callout-bug-unicode">❶</span>
                  </a> </dt>
               <dd>
                  <p>This variable controls the loop. It is declared without an
initial value, immediately after the <code class="literal">let</code>
operand.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl2" class="callout-link">
                     <span data-number="2" class="callout-bug callout-bug-unicode">❷</span>
                  </a> </dt>
               <dd>
                  <p>Any number of additional local variables can be defined after
the loop variable, just as they can in any other
<code class="literal">let</code> expression.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl3" class="callout-link">
                     <span data-number="3" class="callout-bug callout-bug-unicode">❸</span>
                  </a> </dt>
               <dd>
                  <p>If you ever want the loop to end, you have to put some sort of a
test in it.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl4" class="callout-link">
                     <span data-number="4" class="callout-bug callout-bug-unicode">❹</span>
                  </a> </dt>
               <dd>
                  <p>This is the value that will be returned.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl5" class="callout-link">
                     <span data-number="5" class="callout-bug callout-bug-unicode">❺</span>
                  </a> </dt>
               <dd>
                  <p>Note that you iterate the loop by using the loop variable as if
it was a function name.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl6" class="callout-link">
                     <span data-number="6" class="callout-bug callout-bug-unicode">❻</span>
                  </a> </dt>
               <dd>
                  <p>The arguments to this function are the values that
you want the local variables declared in <a href="#dl2" class="callout-link">
                        <span data-number="2" class="callout-bug callout-bug-unicode">❷</span>
                     </a> to have
in the next iteration.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl7" class="callout-link">
                     <span data-number="7" class="callout-bug callout-bug-unicode">❼</span>
                  </a> </dt>
               <dd>
                  <p>This variable controls the loop. It is declared without an
initial value, immediately after the <code class="literal">let</code>
operand.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl8" class="callout-link">
                     <span data-number="8" class="callout-bug callout-bug-unicode">❽</span>
                  </a> </dt>
               <dd>
                  <p>Any number of additional local variables can be defined after
the loop variable, just as they can in any other
<code class="literal">let</code> expression.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl9" class="callout-link">
                     <span data-number="9" class="callout-bug callout-bug-unicode">❾</span>
                  </a> </dt>
               <dd>
                  <p>If you ever want the loop to end, you have to put some sort of a
test in it.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl10" class="callout-link">
                     <span data-number="10" class="callout-bug callout-bug-unicode">❿</span>
                  </a> </dt>
               <dd>
                  <p>This is the value that will be returned.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl11" class="callout-link">
                     <span data-number="11" class="callout-bug callout-bug-text">11</span>
                  </a> </dt>
               <dd>
                  <p>Note that you iterate the loop by using the loop variable as if
it was a function name.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl12" class="callout-link">
                     <span data-number="12" class="callout-bug callout-bug-text">12</span>
                  </a> </dt>
               <dd>
                  <p>The arguments to this function are the values that
you want the local variables declared in <a href="#dl2" class="callout-link">
                        <span data-number="2" class="callout-bug callout-bug-unicode">❷</span>
                     </a> to have
in the next iteration.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl13" class="callout-link">
                     <span data-number="13" class="callout-bug callout-bug-text">13</span>
                  </a> </dt>
               <dd>
                  <p>This variable controls the loop. It is declared without an
initial value, immediately after the <code class="literal">let</code>
operand.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl14" class="callout-link">
                     <span data-number="14" class="callout-bug callout-bug-text">14</span>
                  </a> </dt>
               <dd>
                  <p>Any number of additional local variables can be defined after
the loop variable, just as they can in any other
<code class="literal">let</code> expression.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl15" class="callout-link">
                     <span data-number="15" class="callout-bug callout-bug-text">15</span>
                  </a> </dt>
               <dd>
                  <p>If you ever want the loop to end, you have to put some sort of a
test in it.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl16" class="callout-link">
                     <span data-number="16" class="callout-bug callout-bug-text">16</span>
                  </a> </dt>
               <dd>
                  <p>This is the value that will be returned.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl17" class="callout-link">
                     <span data-number="17" class="callout-bug callout-bug-text">17</span>
                  </a> </dt>
               <dd>
                  <p>Note that you iterate the loop by using the loop variable as if
it was a function name.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl18" class="callout-link">
                     <span data-number="18" class="callout-bug callout-bug-text">18</span>
                  </a> </dt>
               <dd>
                  <p>The arguments to this function are the values that
you want the local variables declared in <a href="#dl2" class="callout-link">
                        <span data-number="2" class="callout-bug callout-bug-unicode">❷</span>
                     </a> to have
in the next iteration.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl19" class="callout-link">
                     <span data-number="19" class="callout-bug callout-bug-text">19</span>
                  </a> </dt>
               <dd>
                  <p>This variable controls the loop. It is declared without an
initial value, immediately after the <code class="literal">let</code>
operand.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl20" class="callout-link">
                     <span data-number="20" class="callout-bug callout-bug-text">20</span>
                  </a> </dt>
               <dd>
                  <p>Any number of additional local variables can be defined after
the loop variable, just as they can in any other
<code class="literal">let</code> expression.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl21" class="callout-link">
                     <span data-number="21" class="callout-bug callout-bug-text">21</span>
                  </a> </dt>
               <dd>
                  <p>If you ever want the loop to end, you have to put some sort of a
test in it.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl22" class="callout-link">
                     <span data-number="22" class="callout-bug callout-bug-text">22</span>
                  </a> </dt>
               <dd>
                  <p>This is the value that will be returned.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl23" class="callout-link">
                     <span data-number="23" class="callout-bug callout-bug-text">23</span>
                  </a> </dt>
               <dd>
                  <p>Note that you iterate the loop by using the loop variable as if
it was a function name.</p>
               </dd>
               <dt class="callout">
                  <a href="#dl24" class="callout-link">
                     <span data-number="24" class="callout-bug callout-bug-text">24</span>
                  </a> </dt>
               <dd>
                  <p>The arguments to this function are the values that
you want the local variables declared in <a href="#dl2" class="callout-link">
                        <span data-number="2" class="callout-bug callout-bug-unicode">❷</span>
                     </a> to have
in the next iteration.</p>
               </dd>
            </dl><p deltaxml:deltaV2="B">Callouts using <code class="tag-element">co</code>:</p><deltaxml:textGroup deltaxml:deltaV2="B"><deltaxml:text deltaxml:deltaV2="B">
            </deltaxml:text></deltaxml:textGroup><pre deltaxml:deltaV2="B" class="screen language-none line-numbers">
               <code>
(let <a name="dl1" id="dl1"/>
                  <span data-number="1" class="callout-bug callout-bug-unicode">❶</span>loopvar <a name="dl2" id="dl2"/>
                  <span data-number="2" class="callout-bug callout-bug-unicode">❷</span>((count 1))
  <a name="dl3" id="dl3"/>
                  <span data-number="3" class="callout-bug callout-bug-unicode">❸</span>(if (&gt; count 10)
    <a name="dl4" id="dl4"/>
                  <span data-number="4" class="callout-bug callout-bug-unicode">❹</span>#t
    (<a name="dl5" id="dl5"/>
                  <span data-number="5" class="callout-bug callout-bug-unicode">❺</span>loopvar <a name="dl6" id="dl6"/>
                  <span data-number="6" class="callout-bug callout-bug-unicode">❻</span>(+ count 1))))

(let <a name="dl7" id="dl7"/>
                  <span data-number="7" class="callout-bug callout-bug-unicode">❼</span>loopvar <a name="dl8" id="dl8"/>
                  <span data-number="8" class="callout-bug callout-bug-unicode">❽</span>((count 1))
  <a name="dl9" id="dl9"/>
                  <span data-number="9" class="callout-bug callout-bug-unicode">❾</span>(if (&gt; count 10)
    <a name="dl10" id="dl10"/>
                  <span data-number="10" class="callout-bug callout-bug-unicode">❿</span>#t
    (<a name="dl11" id="dl11"/>
                  <span data-number="11" class="callout-bug callout-bug-text">11</span>loopvar <a name="dl12" id="dl12"/>
                  <span data-number="12" class="callout-bug callout-bug-text">12</span>(+ count 1))))

(let <a name="dl13" id="dl13"/>
                  <span data-number="13" class="callout-bug callout-bug-text">13</span>loopvar <a name="dl14" id="dl14"/>
                  <span data-number="14" class="callout-bug callout-bug-text">14</span>((count 1))
  <a name="dl15" id="dl15"/>
                  <span data-number="15" class="callout-bug callout-bug-text">15</span>(if (&gt; count 10)
    <a name="dl16" id="dl16"/>
                  <span data-number="16" class="callout-bug callout-bug-text">16</span>#t
    (<a name="dl17" id="dl17"/>
                  <span data-number="17" class="callout-bug callout-bug-text">17</span>loopvar <a name="dl18" id="dl18"/>
                  <span data-number="18" class="callout-bug callout-bug-text">18</span>(+ count 1))))

(let <a name="dl19" id="dl19"/>
                  <span data-number="19" class="callout-bug callout-bug-text">19</span>loopvar <a name="dl20" id="dl20"/>
                  <span data-number="20" class="callout-bug callout-bug-text">20</span>((count 1))
  <a name="dl21" id="dl21"/>
                  <span data-number="21" class="callout-bug callout-bug-text">21</span>(if (&gt; count 10)
    <a name="dl22" id="dl22"/>
                  <span data-number="22" class="callout-bug callout-bug-text">22</span>#t
    (<a name="dl23" id="dl23"/>
                  <span data-number="23" class="callout-bug callout-bug-text">23</span>loopvar <a name="dl24" id="dl24"/>
                  <span data-number="24" class="callout-bug callout-bug-text">24</span>(+ count 1))))</code>
            </pre><deltaxml:textGroup deltaxml:deltaV2="B"><deltaxml:text deltaxml:deltaV2="B">
            </deltaxml:text></deltaxml:textGroup><div deltaxml:deltaV2="B" class="calloutlist">
               <dl>
                  <dt class="callout">
                     <a href="#dl1" class="callout-link">
                        <span data-number="1" class="callout-bug callout-bug-unicode">❶</span>
                     </a> </dt>
                  <dd>
                     <p>This variable controls the loop. It is declared without an
initial value, immediately after the <code class="literal">let</code>
operand.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl2" class="callout-link">
                        <span data-number="2" class="callout-bug callout-bug-unicode">❷</span>
                     </a> </dt>
                  <dd>
                     <p>Any number of additional local variables can be defined after
the loop variable, just as they can in any other
<code class="literal">let</code> expression.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl3" class="callout-link">
                        <span data-number="3" class="callout-bug callout-bug-unicode">❸</span>
                     </a> </dt>
                  <dd>
                     <p>If you ever want the loop to end, you have to put some sort of a
test in it.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl4" class="callout-link">
                        <span data-number="4" class="callout-bug callout-bug-unicode">❹</span>
                     </a> </dt>
                  <dd>
                     <p>This is the value that will be returned.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl5" class="callout-link">
                        <span data-number="5" class="callout-bug callout-bug-unicode">❺</span>
                     </a> </dt>
                  <dd>
                     <p>Note that you iterate the loop by using the loop variable as if
it was a function name.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl6" class="callout-link">
                        <span data-number="6" class="callout-bug callout-bug-unicode">❻</span>
                     </a> </dt>
                  <dd>
                     <p>The arguments to this function are the values that
you want the local variables declared in <a href="#dl2" class="callout-link">
                           <span data-number="2" class="callout-bug callout-bug-unicode">❷</span>
                        </a> to have
in the next iteration.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl7" class="callout-link">
                        <span data-number="7" class="callout-bug callout-bug-unicode">❼</span>
                     </a> </dt>
                  <dd>
                     <p>This variable controls the loop. It is declared without an
initial value, immediately after the <code class="literal">let</code>
operand.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl8" class="callout-link">
                        <span data-number="8" class="callout-bug callout-bug-unicode">❽</span>
                     </a> </dt>
                  <dd>
                     <p>Any number of additional local variables can be defined after
the loop variable, just as they can in any other
<code class="literal">let</code> expression.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl9" class="callout-link">
                        <span data-number="9" class="callout-bug callout-bug-unicode">❾</span>
                     </a> </dt>
                  <dd>
                     <p>If you ever want the loop to end, you have to put some sort of a
test in it.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl10" class="callout-link">
                        <span data-number="10" class="callout-bug callout-bug-unicode">❿</span>
                     </a> </dt>
                  <dd>
                     <p>This is the value that will be returned.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl11" class="callout-link">
                        <span data-number="11" class="callout-bug callout-bug-text">11</span>
                     </a> </dt>
                  <dd>
                     <p>Note that you iterate the loop by using the loop variable as if
it was a function name.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl12" class="callout-link">
                        <span data-number="12" class="callout-bug callout-bug-text">12</span>
                     </a> </dt>
                  <dd>
                     <p>The arguments to this function are the values that
you want the local variables declared in <a href="#dl2" class="callout-link">
                           <span data-number="2" class="callout-bug callout-bug-unicode">❷</span>
                        </a> to have
in the next iteration.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl13" class="callout-link">
                        <span data-number="13" class="callout-bug callout-bug-text">13</span>
                     </a> </dt>
                  <dd>
                     <p>This variable controls the loop. It is declared without an
initial value, immediately after the <code class="literal">let</code>
operand.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl14" class="callout-link">
                        <span data-number="14" class="callout-bug callout-bug-text">14</span>
                     </a> </dt>
                  <dd>
                     <p>Any number of additional local variables can be defined after
the loop variable, just as they can in any other
<code class="literal">let</code> expression.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl15" class="callout-link">
                        <span data-number="15" class="callout-bug callout-bug-text">15</span>
                     </a> </dt>
                  <dd>
                     <p>If you ever want the loop to end, you have to put some sort of a
test in it.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl16" class="callout-link">
                        <span data-number="16" class="callout-bug callout-bug-text">16</span>
                     </a> </dt>
                  <dd>
                     <p>This is the value that will be returned.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl17" class="callout-link">
                        <span data-number="17" class="callout-bug callout-bug-text">17</span>
                     </a> </dt>
                  <dd>
                     <p>Note that you iterate the loop by using the loop variable as if
it was a function name.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl18" class="callout-link">
                        <span data-number="18" class="callout-bug callout-bug-text">18</span>
                     </a> </dt>
                  <dd>
                     <p>The arguments to this function are the values that
you want the local variables declared in <a href="#dl2" class="callout-link">
                           <span data-number="2" class="callout-bug callout-bug-unicode">❷</span>
                        </a> to have
in the next iteration.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl19" class="callout-link">
                        <span data-number="19" class="callout-bug callout-bug-text">19</span>
                     </a> </dt>
                  <dd>
                     <p>This variable controls the loop. It is declared without an
initial value, immediately after the <code class="literal">let</code>
operand.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl20" class="callout-link">
                        <span data-number="20" class="callout-bug callout-bug-text">20</span>
                     </a> </dt>
                  <dd>
                     <p>Any number of additional local variables can be defined after
the loop variable, just as they can in any other
<code class="literal">let</code> expression.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl21" class="callout-link">
                        <span data-number="21" class="callout-bug callout-bug-text">21</span>
                     </a> </dt>
                  <dd>
                     <p>If you ever want the loop to end, you have to put some sort of a
test in it.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl22" class="callout-link">
                        <span data-number="22" class="callout-bug callout-bug-text">22</span>
                     </a> </dt>
                  <dd>
                     <p>This is the value that will be returned.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl23" class="callout-link">
                        <span data-number="23" class="callout-bug callout-bug-text">23</span>
                     </a> </dt>
                  <dd>
                     <p>Note that you iterate the loop by using the loop variable as if
it was a function name.</p>
                  </dd>
                  <dt class="callout">
                     <a href="#dl24" class="callout-link">
                        <span data-number="24" class="callout-bug callout-bug-text">24</span>
                     </a> </dt>
                  <dd>
                     <p>The arguments to this function are the values that
you want the local variables declared in <a href="#dl2" class="callout-link">
                           <span data-number="2" class="callout-bug callout-bug-unicode">❷</span>
                        </a> to have
in the next iteration.</p>
                  </dd>
               </dl>
            </div>
         </div>
      </article>
      <script deltaxml:deltaV2="A=B" src="../../resources/js/prism.js"/>
   </body>
</html>